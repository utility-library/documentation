{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Utility Library documentation; here you can found everything about the utility. </p>"},{"location":"#why","title":"<p>Why?</p>","text":"<p>Utility serves to reduce and simplify the long and tedious processes of creating a script. Take for example the initialization of ESX which translates to StartESX().</p> <p>I developed this library for my own use, but only once I realized the great help and the great simplification of many steps, i decided to publish it to facilitate the work of newbies and veterans, hoping to receive suggestions and support to integrate new features that bring the library to be always updated and useful.</p>"},{"location":"#discord","title":"Discord","text":""},{"location":"#implementation-in-other-script","title":"Implementation in other script","text":"<p>In order to use the Utility you need to load it via the <code>fxmanifest.lua</code></p> Client <p>The normal one is: <pre><code>'@utility_lib/client/native.lua',\n</code></pre> You can also use the minimized version via: <pre><code>'@utility_lib/client/native_min.lua',\n</code></pre></p> Server <p>The normal one is: <pre><code>'@utility_lib/server/native.lua',\n</code></pre> You can also use the minimized version via: <pre><code>'@utility_lib/server/native_min.lua',\n</code></pre></p> Tip <p>In the snippets there is the <code>Utility</code>: </p>"},{"location":"#credits","title":"Credits","text":"<p>Utility Library was created by XenoS.exe#2859</p> <p>Thanks also to MarKz#3003 for giving me the chance to test and develop the library on her RP server</p> To do <p> Improving object and iObject  Adding society implementation for server-side  Cloning money and database thing for server-side</p>"},{"location":"#affiliated-documentations","title":"Affiliated documentations","text":"<p>Utility Weapons Utility Pause Menu</p>"},{"location":"dev/","title":"Welcome","text":"<p>Welcome to the Utility Library documentation, here you can found everything about the utility</p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Submit </p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Quote <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"dev/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"client/advanced_script_creation/DropObjectFromHand/","title":"DropObjectFromHand (Client side)","text":"<p>Drop the object that was taken via the TakeObjectOnHand</p> Argument Data Type Needed Default Description <code>Entity</code> entity <code>-</code> The entity <code>Delete</code> boolean <code>false</code> Delete or no the entity when dropped <p>Dont need to be called every frame</p> Example <p><pre><code>DropObjectFromHand(entity, false)\n</code></pre> </p>"},{"location":"client/advanced_script_creation/EditDialogue/","title":"EditDialogue","text":"<p>Edit an already created dialogue with a entity</p> Argument Data Type Needed Default Description <code>Entity</code> string/number <code>-</code> The entity that handle the dialogue Returns Child Data Type Description Question function The function to set the questions Response function The function to set the responses LastQuestion function The function to set the last response by the entity <p>Dont need to be called every frame</p> Example <pre><code>EditDialogue(entity)\n.Question({\n    \"Utility is the revolution\"\n})\n.Response(\n    {\n        [\"~g~[E]\"] = \"I totally agree with you\"\n    }\n)\n</code></pre>"},{"location":"client/advanced_script_creation/GetDirectionFromVectors/","title":"GetDirectionFromVectors","text":"<p>Obtains the direction from two vectors</p> Argument Data Type Needed Default Description <code>Vector 1</code> vector3 <code>-</code> The first vector <code>Vector 2</code> vector3 <code>-</code> The second vector <p>Dont need to be called every frame</p> Example <pre><code>GetDirectionFromVectors(vec1, vec2)\n</code></pre>"},{"location":"client/advanced_script_creation/GetOnHandObject/","title":"GetOnHandObject (Client side)","text":"<p>Return the current on hand object, return 0 if no object</p> Returns Data Type Description number The object handle or 0 <p>Dont need to be called every frame</p> Example <pre><code>GetOnHandObject()\n</code></pre>"},{"location":"client/advanced_script_creation/IsEntityOnDialogue/","title":"IsEntityOnDialogue","text":"<p>Check if the entity is on a dialogue</p> Argument Data Type Needed Default Description <code>Entity</code> string/number <code>-</code> The entity Returns Data Type Description boolean If on dialogue or no <p>Dont need to be called every frame</p> Example <pre><code>IsEntityOnDialogue(entity)\n</code></pre>"},{"location":"client/advanced_script_creation/RotationToDirection/","title":"RotationToDirection","text":"<p>Obtains the direction from a rotation</p> Argument Data Type Needed Default Description <code>Rotation</code> vector3 <code>-</code> The rotation <p>Dont need to be called every frame</p> Example <pre><code>RotationToDirection(rot)\n</code></pre>"},{"location":"client/advanced_script_creation/StartDialogue/","title":"StartDialogue","text":"<p>Start a dialogue with a entity</p> Argument Data Type Needed Default Description <code>Entity</code> entity <code>-</code> The entity with which you want to start a dialogue <code>Distance</code> number <code>-</code> The distance <code>Function</code> function <code>-</code> The function that is called when the player responds with the entity <code>stopWhenTalking</code> boolean <code>-</code> If true the ped will stop and talk to the player Returns Child Data Type Description Question function The function to set the questions Response function The function to set the responses LastQuestion function The function to set the last response by the entity <p>Dont need to be called every frame</p> Example <p> </p>"},{"location":"client/advanced_script_creation/StopDialogue/","title":"StopDialogue","text":"<p>Stop a dialogue</p> Argument Data Type Needed Default Description <code>Entity</code> string/number <code>-</code> The entity that handle the dialogue <code>immediately</code> boolean <code>false</code> <p>Dont need to be called every frame</p> Example <pre><code>StopDialogue(entity)\n</code></pre>"},{"location":"client/advanced_script_creation/TakeObjectOnHand/","title":"TakeObjectOnHand (Client side)","text":"<p>Take the object defined as an argument</p> Argument Data Type Needed Default Description <code>Ped</code> ped <code>-</code> The ped that take the object <code>Entity</code> entity/string/hash <code>-</code> The entity to take, you can pass the object handle or the model name/hash <code>zOffset</code> number <code>0.2</code> The z offset <code>xPos</code> number <code>0.2</code> The x position for the attachment <code>yPos</code> number <code>0.08</code> The y position for the attachment <code>zPos</code> number <code>0.2</code> The z position for the attachment <code>xRot</code> number <code>-45.0</code> The x rotation for the attachment <code>yRot</code> number <code>290.0</code> The y rotation for the attachment <code>zRot</code> number <code>0.0</code> The z rotation for the attachment <p>Dont need to be called every frame</p> Example <p>With the model name <pre><code>TakeObjectOnHand(PlayerPedId(), \"prop_roadcone02a\")\n</code></pre> With the entity handle <pre><code>TakeObjectOnHand(PlayerPedId(), obj)\n</code></pre></p> <p></p>"},{"location":"client/advanced_script_creation/heist/BreakDoorWithThermalCharge/","title":"BreakDoorWithThermalCharge","text":"<p>Plays the thermal charge scene on the given door, automatically finds all the data it needs, and moves the player to the start coordinates</p> Argument Data Type Needed Default Description <code>door</code> object <code>-</code> <code>bagComponent</code> number <code>45</code> Of note that the native replaces the bag, you will have to give him the player's initial bag <code>duration</code> number <code>3000</code> Total duration of lock stripping in ms <p>Dont need to be called every frame</p> Example <pre><code>local coords = GetEntityCoords(PlayerPedId())\nlocal door = GetClosestObjectOfType(coords, 4.0, `hei_v_ilev_bk_gate_pris`)\n\nif door &gt; 0 then\n    BreakDoorWithThermalCharge(door)\nend\n</code></pre>"},{"location":"client/advanced_script_creation/heist/CreateTrolly/","title":"CreateTrolly","text":"<p>Create a lootable trolly, everything will be handled automatically by the lib, you just have to give the money and define the type of trolly</p> Argument Data Type Needed Default Description <code>type</code> string <code>-</code> The type of trolly: cash, gold, diamond <code>coords</code> vector3 <code>-</code> <code>giveCash</code> function <code>-</code> This function is executed each time a money bundle enters the bag <code>notify</code> string <code>Press {E} to begin looting the trolly</code> Marker notification to interact with the cart <code>minSpeed</code> number <code>1.0</code> minimum speed at which the player can loot (1.0 = normal speed) <code>maxSpeed</code> number <code>1.6</code> maximum speed at which the player can loot (1.0 = normal speed) Returns Data Type Description id The marker id obj The trolly object <p>Dont need to be called every frame</p> Example <pre><code>local coords = GetEntityCoords(PlayerPedId())\nlocal tcoords = GetOffsetFromEntityInWorldCoords(PlayerPedId(), 0.0, 2.0, 0.0)\n\nCreateTrolly(\"cash\", tcoords, function()\n    print(\"Pickuped cash\")\nend)\n</code></pre>"},{"location":"client/advanced_script_creation/heist/guards/CreateGuard/","title":"CreateGuard","text":"<p>Creates a guard that can be assigned a route</p> Argument Data Type Needed Default Description <code>model</code> string/number <code>-</code> The ped model <code>coords</code> vector3 <code>-</code> <code>heading</code> number <code>-</code> <code>difficulty</code> string <code>-</code> Can be: easy, medium, hard, veryhard <code>guardRoute</code> route <code>-</code> The route id (created using CreateGuardRoute) Returns Data Type Description ped The guard ped <p>Dont need to be called every frame</p> Example <pre><code>local guard = CreateGuard(\"mp_m_securoguard_01\", vector3(241.67, 222.49, 106.29), 0.0, \"easy\")\nGiveWeaponToPed(guard, `WEAPON_PISTOL`, 255, false, true)\n</code></pre>"},{"location":"client/advanced_script_creation/heist/guards/CreateGuardRoute/","title":"CreateGuardRoute","text":"<p>Creates a guard route that can be assigned to a guard</p> Argument Data Type Needed Default Description <code>name</code> string <code>-</code> A name to identify the guard route <code>positions</code> vector3/vector4 (array) <code>-</code> An array with the guard positions (vec4 its also with heading) <code>manualRouteLink</code> function <code>-</code> See the example <p>Dont need to be called every frame</p> Example <pre><code>-- The guard will take this route in circular order (A &gt; B &gt; C &gt; A)\n\nCreateGuardRoute(\"test\", {\n    vector3(1.0, 1.0, 1.0), -- A\n    vector3(2.0, 2.0, 2.0), -- B\n    vector3(3.0, 3.0, 3.0), -- C\n})\n</code></pre> <p>Manual route linking <pre><code>local positions = {\n    vector3(1.0, 1.0, 1.0), -- A\n    vector3(2.0, 2.0, 2.0), -- B\n    vector3(3.0, 3.0, 3.0), -- C\n}\n\nCreateGuardRoute(\"test\", positions, function(last, current)\n    if current == #positions then -- if is the last route, link it to the first (circular)\n        AddPatrolRouteLink(current, 1) -- close the circle (C &gt; A)\n    end\n\n    if current &gt; 1 then -- if we need to link it\n        AddPatrolRouteLink(last, current) -- (A &gt; B) (B &gt; C)\n    end\nend)\n</code></pre></p>"},{"location":"client/advanced_script_creation/heist/guards/SetGuardDifficulty/","title":"SetGuardDifficulty","text":"<p>sets the difficulty of a guard </p> Argument Data Type Needed Default Description <code>guard</code> number <code>-</code> The guard index <code>difficulty</code> string <code>-</code> Can be: easy, medium, hard, veryhard <p>Dont need to be called every frame</p> Example <pre><code>SetGuardDifficulty(guard, \"medium\")\n</code></pre>"},{"location":"client/advanced_script_creation/heist/guards/SetGuardRoute/","title":"SetGuardRoute","text":"<p>sets the route of a guard </p> Argument Data Type Needed Default Description <code>guard</code> number <code>-</code> The guard index <code>route</code> route <code>-</code> The route id/name <p>Dont need to be called every frame</p> Example <pre><code>SetGuardRoute(guard, \"test\")\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/CreateNui3d/","title":"CreateNui3d","text":"<p>Create a 3d nui in the game, simply render a html page in a DUI</p> Argument Data Type Needed Default Description <code>GFXName</code> string <code>-</code> The name of your .gfx render <code>Directory</code> anything <code>-</code> The directory of the html file <p>Dont need to be called every frame</p> Returns Child Data Type Description N3dClass class The nui 3d class to interact with the n3d (click on N3dClass to see the class method) handle number The handle for interact with the n3d Example <pre><code>local n3d = CreateNui3d(\"utility_lib_1\", \"html/ui.html\")\n\nn3d:show(vector3(0.0, 0.0, 0.0))\n</code></pre> My first project with the n3d <p>I created a ammo hud with the n3d and its amazing, is like an object, but also like an nui,sincerely i love this thing!</p> <p> If dont start click me You can found this script here &gt; https://forum.cfx.re/t/release-utility-ammohud/4291362</p>"},{"location":"client/advanced_script_creation/n3d/GetScaleformsStatus/","title":"GetScaleformsStatus","text":"<p>Returns the status of the default scaleforms/gfx renderer (if is taken from a n3d)</p> <p>Dont need to be called every frame</p> Returns Child Data Type Description activeList table {name = scaleformName, data = n3d} inactiveList table {name = scaleformName, data = {}} Example <pre><code>local active, inactive = GetScaleformsStatus()\n\nprint(inactive[1]) -- print the first scaleform/gfx available  \n</code></pre>"},{"location":"client/advanced_script_creation/n3d/IsScaleformTaken/","title":"IsScaleformTaken","text":"<p>Check if a default scaleform renderer (utility_lib_n) is taken from an n3d</p> Argument Data Type Needed Default Description <code>GFXName/Scaleform name</code> string <code>-</code> The name of your .gfx render <p>Dont need to be called every frame</p> Returns Child Data Type Description isTaken boolean Example <pre><code>local isTaken = IsScaleformTaken(\"utility_lib_9\")\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/","title":"N3d Class Methods","text":"<p>This is all of the methods for the n3d class</p> Class Description <code>init</code> Load the .gfx render to render a nui, width and height can be setted <code>datas</code> Return a table with all the datas of the N3d (options and default datas) <code>destroy</code> Delete the .gfx render and unload the scaleform, you need to do that if you don't need that n3d <code>started</code> Return true if the .gfx render has finished to load anymore <code>show</code> Shows the n3d <code>hide</code> Hides the n3d, but keeps the render active for later use <code>visible</code> Return true if the .gfx render and the n3d is visible <code>scale</code> You can change the scale of the whole rendering, it takes some knowledge in DUI <code>rotation</code> The heading of the render <code>attach</code> Attach the n3d to the entity, accept some offsets <code>detach</code> Detach the n3d from the entity <code>object</code> Return the dui render <code>replaceTexture</code> Replace a texture with this n3d (dui) <code>msg</code> Send message to the dui render, can be use like the SendNuiMessage for update data on the n3d All classes arguments"},{"location":"client/advanced_script_creation/n3d/N3dClass/#read-the-argument","title":"Read the argument!","text":"init Argument Data Type Default Description <code>directory</code> string <code>-</code> The directory of the html file <code>width</code> number <code>1920</code> The width of the render <code>height</code> number <code>1080</code> The height of the render datas <p>Returns</p> Data Type Description table All the datas of the N3d (options and default datas) destroy started <p>Returns</p> Data Type Description boolean If is started or no show Argument Data Type Default Description <code>coords</code> vector3 <code>-</code> The coords where the n3d need to be show <code>scale</code> number <code>0.1</code> The scale of the n3d (0.1 - 1.0) hide visible <p>Returns</p> Data Type Description boolean If is visible or no scale Argument Data Type Default Description <code>scale</code> vector3 <code>-</code> The new advanced scale of the DUI rotation Argument Data Type Default Description <code>rotation</code> number <code>-</code> The rotation (0.0 - 360.0) <code>withplayer</code> boolean <code>false</code> If true add the custom rotation to the rotation of the player for sync the player heading, otherwise dont rotate with the player attach Argument Data Type Default Description <code>entity</code> entity <code>-</code> The entity to attach <code>offset</code> vector3 <code>vector3(0.0,0.0,0.0)</code> The offset of the attachment (x, y, z) detach Argument Data Type Default Description <code>At Coords</code> boolean <code>-</code> If true, detach the n3d at the detachment coordinates, otherwise return to the last recorded coordinates object <p>Returns</p> Data Type Description Dui Handle The rendering dui replaceTexture Argument Data Type Default Description <code>dict</code> string <code>-</code> The texture dictionary <code>textureName</code> string <code>-</code> The texture name msg Argument Data Type Default Description <code>Msg</code> table <code>-</code> The table to send at the n3d"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example","title":"Example","text":"<pre><code>n3d:init(\"html/ui.html\")\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_1","title":"Example","text":"<pre><code>n3d:datas()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_2","title":"Example","text":"<pre><code>n3d:destroy()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_3","title":"Example","text":"<pre><code>n3d:started()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_4","title":"Example","text":"<pre><code>n3d:show(vector3(0.0, 0.0, 0.0))\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_5","title":"Example","text":"<pre><code>n3d:hide()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_6","title":"Example","text":"<pre><code>n3d:visible()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_7","title":"Example","text":"<pre><code>n3d:scale(vector3(1.0, 5.0, 3.0))\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_8","title":"Example","text":"<pre><code>n3d:rotation(90.0)\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_9","title":"Example","text":"<pre><code>n3d:attach(entity)\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_10","title":"Example","text":"<pre><code>n3d:detach()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_11","title":"Example","text":"<pre><code>n3d:object()\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_12","title":"Example","text":"<pre><code>n3d:replaceTexture(\"p_cs_cam_phone\", \"phone_screen\")\n</code></pre>"},{"location":"client/advanced_script_creation/n3d/N3dClass/#example_13","title":"Example","text":"<pre><code>n3d:msg({\n    show = true\n})\n</code></pre> Listen the message <p>The listening of the messages sent by the msg method can be handled through javascript in html, like the nui. Here below you can find an example</p> <pre><code>window.addEventListener('message', function(event){     \n    console.log(`Show is ` + event.data.show)\n})\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/AddEntityToScene/","title":"AddEntityToScene","text":"<p>Add an entity or create an entity and add it to an existing scene</p> Argument Data Type Needed Default Description <code>entity</code> string/object <code>-</code> The entity or the model <code>scene</code> scene <code>-</code> The scene netid <code>dict</code> string <code>-</code> The anim dict that the entity will play <code>name</code> string <code>-</code> The anim name that the entity will play <code>speed</code> number <code>4.0</code> <code>speedMultiplier</code> number <code>-8.0</code> <code>flag</code> number <code>1</code> <p>Dont need to be called every frame</p> Example <pre><code>AddEntityToScene(\"prop_weed_01\", scene, \"somedict\", \"somename\")\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/AddPedToScene/","title":"AddPedToScene","text":"<p>Add a ped or create a ped and add it to an existing scene</p> Argument Data Type Needed Default Description <code>ped</code> string/ped <code>-</code> The ped or the model <code>scene</code> scene <code>-</code> The scene netid <code>dict</code> string <code>-</code> The anim dict that the ped will play <code>name</code> string <code>-</code> The anim name that the ped will play <code>speed</code> number <code>4.0</code> <code>speedMultiplier</code> number <code>-8.0</code> <code>flag</code> number <code>1</code> <p>Dont need to be called every frame</p> Example <pre><code>AddPedToScene(\"a_f_m_beach_01\", scene, \"somedict\", \"somename\")\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/AddPlayerToScene/","title":"AddPlayerToScene","text":"<p>Add a player to an existing scene</p> Argument Data Type Needed Default Description <code>player</code> player <code>-</code> The player client id (PlayerId) <code>scene</code> scene <code>-</code> The scene netid <code>dict</code> string <code>-</code> The anim dict that the ped will play <code>name</code> string <code>-</code> The anim name that the ped will play <code>speed</code> number <code>4.0</code> <code>speedMultiplier</code> number <code>-8.0</code> <code>flag</code> number <code>1</code> <p>Dont need to be called every frame</p> Example <pre><code>AddPlayerToScene(PlayerId(), scene, \"somedict\", \"somename\")\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/CreateScene/","title":"CreateScene","text":"<p>Create a networked scene</p> Argument Data Type Needed Default Description <code>coords</code> vector3 <code>-</code> <code>rot</code> vector3 <code>-</code> <code>holdLastFrame</code> boolean <code>false</code> <code>looped</code> boolean <code>false</code> <code>animSpeed</code> number <code>1.3</code> Returns Data Type Description scene The scene netid <p>Dont need to be called every frame</p> Example <pre><code>local player = PlayerPedId()\nlocal coords = GetEntityCoords(player)\nlocal rot = GetEntityRotation(player)\n\nlocal scene = CreateScene(coords, rot)\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/GetSceneEntity/","title":"GetSceneEntity","text":"<p>Return the entity with a specific model (only entity created by the scene)</p> Argument Data Type Needed Default Description <code>scene</code> scene <code>-</code> The scene netid <code>model</code> string/number <code>-</code> Returns Data Type Description obj The scene object <p>Dont need to be called every frame</p> Example <pre><code>local entity = GetSceneEntity(scene, \"prop_weed_01\")\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/GoNearInitialOffset/","title":"GoNearInitialOffset","text":"<p>Moves the player to the starting offest (this should be perfect, its semi reversed from R* scripts)</p> Argument Data Type Needed Default Description <code>player</code> player/ped <code>-</code> The player ped id (PlayerPedId) or the player client id (PlayerId) <code>coords</code> vector3 <code>-</code> Starting coords to calculate the animation offset <code>rot</code> vector3 <code>-</code> Starting rotation to calculate the animation offset <code>dict</code> string <code>-</code> The animation dict where to find the offset <code>name</code> string <code>-</code> The animation name where to find the offset <p>Dont need to be called every frame</p> Example <pre><code>local player = PlayerPedId()\nlocal coords = GetEntityCoords(player)\nlocal rot = GetEntityCoords(player)\n\nGoNearInitialOffset(player, coords, rot, \"somedict\", \"somename\")\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/StartScene/","title":"StartScene","text":"<p>Start an existing scene</p> Argument Data Type Needed Default Description <code>scene</code> string <code>-</code> The scene netid <code>goNearInitialOffset</code> boolean <code>-</code> If true it will automatically move every player near the initial animation offset <p>Dont need to be called every frame</p> Example <pre><code>StartScene(scene, true)\n</code></pre>"},{"location":"client/advanced_script_creation/scenes/StopScene/","title":"StopScene","text":"<p>Stop an existing scene</p> Argument Data Type Needed Default Description <code>scene</code> string <code>-</code> The scene netid <p>Dont need to be called every frame</p> Example <pre><code>StopScene(scene)\n</code></pre>"},{"location":"client/advanced_script_creation/translateSmooth/TranslateObjectCoords/","title":"TranslateObjectCoords","text":"<p>Moves an entity with a constant speed.</p> Argument Data Type Needed Default Description <code>obj</code> object <code>-</code> <code>destination</code> vector3 <code>-</code> The destination coords, you can also use GetOffsetFromEntityInWorldCoords <code>duration</code> number <code>-</code> Total duration in ms <p>Dont need to be called every frame</p> Example <pre><code>local offset = GetOffsetFromEntityInWorldCoords(obj, 2.0, 0.0, 0.0)\n\nTranslateObjectCoords(obj, offset, 5000)\n</code></pre>"},{"location":"client/advanced_script_creation/translateSmooth/TranslateObjectCoordsCubicBezier/","title":"TranslateObjectCoordsCubicBezier","text":"<p>Moves an entity based on a cubic bezier. Is a little \"advanced\" logic to explain how it works in a nutshell. You can also use https://cubic-bezier.com (select the arrow next to copy and copy the last one, remember to add a 0 before the numbers)</p> Info <p>Thanks to https://github.com/gre/bezier-easing for the incredible math behind this, i just converted the code to lua and did the NEWTON_MIN_SLOPE tweening, since precision rounding in lua seems to be different than in js.</p> Argument Data Type Needed Default Description <code>obj</code> object <code>-</code> <code>destination</code> vector3 <code>-</code> The destination coords, you can also use GetOffsetFromEntityInWorldCoords <code>duration</code> number <code>-</code> Total duration in ms <code>cubicBezier</code> table/string <code>-</code> A table containing the 2 points or one of the predefined cubic beziers <p>Dont need to be called every frame</p> Predefined cubic beziers Name Description ease Indicates that the interpolation starts slowly, accelerates sharply, and then slows gradually towards the end. This keyword represents the easing function cubic-bezier(0.25, 0.1, 0.25, 1.0). It is similar to ease-in-out, though it accelerates more sharply at the beginning. easeIn Indicates that the interpolation starts slowly, then progressively speeds up until the end, at which point it stops abruptly. This keyword represents the easing function cubic-bezier(0.42, 0.0, 1.0, 1.0). easeOut Indicates that the interpolation starts abruptly and then progressively slows down towards the end. This keyword represents the easing function cubic-bezier(0.0, 0.0, 0.58, 1.0). easeInOut Indicates that the interpolation starts slowly, speeds up, and then slows down towards the end. This keyword represents the easing function cubic-bezier(0.42, 0.0, 0.58, 1.0). At the beginning, it behaves like the ease-in keyword; at the end, it is like the ease-out keyword. <p>Source of descriptions</p> Example With Predefined Cubic Bezier <pre><code>local offset = GetOffsetFromEntityInWorldCoords(obj, 2.0, 0.0, 0.0)\n\nTranslateObjectCoordsCubicBezier(obj, offset, 5000, \"ease\")\n</code></pre> With Custom Cubic Bezier <pre><code>local offset = GetOffsetFromEntityInWorldCoords(obj, 2.0, 0.0, 0.0)\n\nTranslateObjectCoordsCubicBezier(obj, offset, 5000, {0.0, 0.9, 1.0, 1.0})\n</code></pre>"},{"location":"client/advanced_script_creation/translateSmooth/TranslateObjectRotation/","title":"TranslateObjectRotation","text":"<p>Rotate an entity with a constant speed.</p> Argument Data Type Needed Default Description <code>obj</code> object <code>-</code> <code>destination</code> vector3 <code>-</code> The destination rotation <code>duration</code> number <code>-</code> Total duration in ms <code>rotationOrder</code> number <code>-</code> The order yaw, pitch and roll is applied. Usually 2. Read more here <p>Dont need to be called every frame</p> Example <pre><code>local rot = GetEntityRotation(obj, 2)\n\nTranslateObjectRotation(obj, rot + vec3(0.0, 0.0, 90.0), 5000, 2)\n</code></pre>"},{"location":"client/advanced_script_creation/translateSmooth/TranslateObjectRotationCubicBezier/","title":"TranslateObjectRotationCubicBezier","text":"<p>Rotate an entity based on a cubic bezier. Is a little \"advanced\" logic to explain how it works in a nutshell. You can also use https://cubic-bezier.com (select the arrow next to copy and copy the last one, remember to add a 0 before the numbers)</p> Info <p>Thanks to https://github.com/gre/bezier-easing for the incredible math behind this, i just converted the code to lua and did the NEWTON_MIN_SLOPE tweening, since precision rounding in lua seems to be different than in js.</p> Argument Data Type Needed Default Description <code>obj</code> object <code>-</code> <code>destination</code> vector3 <code>-</code> The destination coords, you can also use GetOffsetFromEntityInWorldCoords <code>duration</code> number <code>-</code> Total duration in ms <code>rotationOrder</code> number <code>-</code> The order yaw, pitch and roll is applied. Usually 2. Read more here <code>cubicBezier</code> table/string <code>-</code> A table containing the 2 points or one of the predefined cubic beziers <p>Dont need to be called every frame</p> Predefined cubic beziers Name Description ease Indicates that the interpolation starts slowly, accelerates sharply, and then slows gradually towards the end. This keyword represents the easing function cubic-bezier(0.25, 0.1, 0.25, 1.0). It is similar to ease-in-out, though it accelerates more sharply at the beginning. easeIn Indicates that the interpolation starts slowly, then progressively speeds up until the end, at which point it stops abruptly. This keyword represents the easing function cubic-bezier(0.42, 0.0, 1.0, 1.0). easeOut Indicates that the interpolation starts abruptly and then progressively slows down towards the end. This keyword represents the easing function cubic-bezier(0.0, 0.0, 0.58, 1.0). easeInOut Indicates that the interpolation starts slowly, speeds up, and then slows down towards the end. This keyword represents the easing function cubic-bezier(0.42, 0.0, 0.58, 1.0). At the beginning, it behaves like the ease-in keyword; at the end, it is like the ease-out keyword. <p>Source of descriptions</p> Example With Predefined Cubic Bezier <pre><code>local rot = GetEntityRotation(obj, 2)\n\nTranslateObjectRotationCubicBezier(obj, rot + vec3(0.0, 0.0, 90.0), 5000, 2, \"ease\")\n</code></pre> With Custom Cubic Bezier <pre><code>local rot = GetEntityRotation(obj, 2)\n\nTranslateObjectRotationCubicBezier(obj, rot + vec3(0.0, 0.0, 90.0), 5000, 2, {0.0, 0.9, 1.0, 1.0})\n</code></pre>"},{"location":"client/camera/CreateCamera/","title":"CreateCamera","text":"Argument Data Type Needed Default Description <code>Coords</code> vector3 <code>-</code> The coords to create the camera <code>Rotation</code> vector3 <code>-</code> The rotation to create the camera <code>Active</code> boolean <code>-</code> If true switch on that cam <code>Shake</code> table <code>-</code> Shake or no Returns Data Type Description cam The camera handle <p>Dont need to be called every frame</p> Example <pre><code>local cam = CreateCamera(vector3(0.0, 0.0, 0.0), vector3(0.0, 0.0, 0.0), false, {type = \"ROAD_VIBRATION_SHAKE\", amount = 1.0})\n</code></pre>"},{"location":"client/camera/SwitchBetweenCam/","title":"SwitchBetweenCam","text":"Argument Data Type Needed Default Description <code>Old Cam</code> cam <code>-</code> The old cam <code>New Cam</code> cam <code>-</code> The new cam <code>Duration</code> number <code>1500</code> The duration of the fade <p>Dont need to be called every frame</p> Example <pre><code>SwitchBetweenCam(old_cam, cam)\n</code></pre>"},{"location":"client/emitter/Info/","title":"Information","text":""},{"location":"client/emitter/Info/#what-is-an-event-emitter","title":"What is an event emitter?","text":"<p>An event emitter is function that listens a event and than fires a callback with a value.</p>"},{"location":"client/emitter/On/","title":"On","text":"<p>Is the listener of the emitter</p> Argument Data Type Needed Default Description <code>Type</code> string <code>-</code> The type of the emitter <code>Callback</code> function <code>-</code> The function that will be executed when the event has been triggered <code>Fake Triggerable</code> boolean <code>false</code> If that is true you can use the trigger Utility:FakeTrigger to trigger the emitter"},{"location":"client/emitter/On/#emitter-types","title":"Emitter Types","text":"Name Description Parameters marker Triggered when the player interact with a marker id object Triggered when the player interact with a iobject id spotted Triggered when the player is spotted by a guard guard (entity) entered Triggered when the player enter a marker/object type, id leaved Triggered when the player leave a marker/object type, id <p>Dont need to be called every frame</p> Example <pre><code>On(\"marker\", function(id)\n    if id == \"potato\" then\n        print(\"I love potato\")\n    elseif id == \"carrot\" then\n        print(\"I hate carrot\")\n    end\nend)\n</code></pre> Example of the fake trigger <pre><code>--                                    Type       Id\nTriggerEvent(\"Utility:FakeTrigger\", \"marker\", \"potato\")\n</code></pre>"},{"location":"client/esx_integration/GetDataForJob/","title":"GetDataForJob","text":"<p>Return the number of player that have that job and the workers list of that job</p> Argument Data Type Needed Default Description <code>Job</code> string <code>-</code> The job name Returns Data Type Description number The number of player with that job table A table with all the id of the players with that job <p>Dont need to be called every frame</p> Example <pre><code>local count, workers = GetDataForJob(\"police\")\n\n-- count = 3\n-- workers = {3, 5, 19} \n</code></pre>"},{"location":"client/esx_integration/StartESX/","title":"StartESX","text":"<p>Start ESX with a line, dont need any return, all will be done automatically. It also automatically loads player data (like the job, that auto update) </p> <p>the <code>ESX</code> and <code>xPlayer</code> variables are made available</p> Argument Data Type Needed Default Description <code>esxEventName</code> string <code>esx:getSharedObject</code> The esx event, if you have the replaced trigger <code>Second Job</code> string <code>-</code> If you have set up the second job in the utility configuration, you need to enter the name here for it to auto-update <p>Dont need to be called every frame</p> Example <pre><code>StartESX()\n</code></pre> Old method <pre><code>ESX = nil\nlocal PlayerData = {}\n\nCitizen.CreateThread(function()\n    while ESX == nil do\n        TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)\n        Citizen.Wait(0)\n    end\n\n    while ESX.GetPlayerData().job == nil do\n        Citizen.Wait(1)\n    end\n\n    PlayerData = ESX.GetPlayerData()\nend)\n\nRegisterNetEvent('esx:setJob')\nAddEventHandler('esx:setJob', function(xPlayer)\n    PlayerData = xPlayer\nend)\n</code></pre>"},{"location":"client/managing_data/GetFrom/","title":"GetFrom","text":"<p>Allows you to get the data saved through the SetFor</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id <code>Property</code> string/table <code>-</code> The data name <p>Dont need to be called every frame</p> Example <p>Get a specific data saved for that property <pre><code>GetFrom(\"myid\", \"something\")  \n</code></pre> Return <code>\"Hello\"</code> (string)</p> <p>Get all data saved for that property <pre><code>GetFrom(\"myid\")         \n</code></pre> Return <code>{ something = \"Hello\", something2 = 5, something3 = {1, 2, 3} }</code> (table)</p>"},{"location":"client/managing_data/SetFor/","title":"SetFor","text":"<p>Allows you to manipulate a table already created by the utility without having to create it every time</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id <code>Property</code> string/table <code>-</code> The data <code>Value</code> any <code>-</code> The value <code>Synced</code> boolean <code>false</code> Sync or the data for all script that load the utility <p>Dont need to be called every frame</p> Example <p>Here you can set any, i told ANY, value to an marker, an iObject, an number or anything else</p> <p>Set data one by one <pre><code>SetFor(\"myid\", \"something\", \"Hello\")\nSetFor(\"myid\", \"something2\", 5)\nSetFor(\"myid\", \"something3\", {1, 2, 3})\n</code></pre></p> <p>Set data with a table <pre><code>SetFor(\"myid\", {\n    something = \"Hello\"\n    something2 = 5\n    something3 = {1, 2, 3}\n})\n</code></pre></p> Synced data <p>In the script \"utility_test\" if call the setfor with synced arguments to true <pre><code>    SetFor(\"myid\", \"something\", \"Hello\", true)\n\n    --or\n\n    SetFor(\"myid\", {\n        something = \"Hello\"\n    }, true)\n</code></pre></p> <p>Now i call the GetFrom from the resource \"utility_test2\" and the data will be synced <pre><code>GetFrom(\"myid\", \"something\") \n</code></pre> Return <code>Hello</code> (string)</p>"},{"location":"client/marker-object-blip/CreateBlip/","title":"CreateBlip","text":"<p>Create a blip</p> Argument Data Type Needed Default Description <code>Name</code> string/number <code>-</code> The name of the blip <code>Coords</code> vector3 <code>-</code> The coordinates to create the blip <code>Sprite</code> number <code>-</code> The sprite ID <code>Colour</code> number <code>-</code> The colour ID <code>Scale</code> number <code>1.0</code> The scale of the blip <p>Dont need to be called every frame</p> Example <pre><code>CreateBlip(\"My Blip\", vector3(0.0, 0.0, 0.0), 11, 2)\n</code></pre>"},{"location":"client/marker-object-blip/CreateJobBlip/","title":"CreateJobBlip","text":"<p>Create a blip for a specific job. (auto-update)</p> Argument Data Type Needed Default Description <code>Name</code> string/number <code>-</code> The name of the blip <code>Coords</code> vector3 <code>-</code> The coordinates to create the blip <code>Job</code> string <code>-</code> The job that can see the blip <code>Sprite</code> number <code>-</code> The sprite ID <code>Colour</code> number <code>-</code> The colour ID <code>Scale</code> number <code>1.0</code> The scale of the blip <p>Dont need to be called every frame</p> Example <pre><code>CreateJobBlip(\"My Blip\", vector3(0.0, 0.0, 0.0), \"police\", 11, 2)\n</code></pre>"},{"location":"client/marker-object-blip/CreateMarker/","title":"CreateMarker","text":"<p>Create a marker, can be an 3d text or real actual marker</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to manage the marker <code>Coords</code> vector3 <code>-</code> The coordinates to create the marker <code>Render Distance</code> number <code>-</code> The distance for the render <code>Interaction Distance</code> number <code>-</code> The distance for the interaction <code>Options</code> table/string <code>-</code> See the config arguments <p>Dont need to be called every frame, if called every frame and the marker already exist, sleep the loop for 100 ms to prevent spam</p> Example <p>Creating marker <pre><code>CreateMarker(\"myid\", vector3(-239.89, -989.42, 28.29), 5.0, 5.0, {255, 0, 0})\n</code></pre> </p> <p>Creating 3d text <pre><code>CreateMarker(\"myid\", vector3(-239.89, -989.42, 29.29), 5.0, 5.0, \"Press [~g~E~w~] to interact\")\n</code></pre> </p> <p>Creating a custom marker using a config <pre><code>local config = {\n    rgb = {0, 0, 255},\n    type = 29,\n    scale = vector3(2.0, 2.0, 3.0),\n}\n\nCreateMarker(\"myid\", vector3(-239.89, -989.42, 28.29), 5.0, 5.0, config)\n</code></pre> </p> Config arguments Child Data Type Explanation job string/table The job that can see and interact with the marker rgb table The rgb data (<code>{255, 255, 255}</code>) text string The 3d text to be shown notify string The ButtonNotification data type number The marker type direction vector3 The direction of the marker rotation vector3 The rotation of the marker scale vector3 The scale of the marker alpha number The alpha of the marker, from 0 to 255 animation boolean Toggle the bouncing animation How to listen the interaction <p>For listen the interaction you need to use the emitter</p> <p>Example</p> <p><pre><code>-- This create the red marker\nCreateMarker(\"myid\", vector3(-239.89, -989.42, 28.29), 5.0, 5.0, {255, 0, 0})\n\n-- Listening the interaction\nOn(\"marker\", function(id)\n    if id == \"myid\" then\n        print(\"Hello\")\n    end\nend)\n</code></pre> LSS: If i press E near the marker in the F8 console will be printed <code>Hello</code></p> Tip <p>You can write <code>{r}</code> to generate a random id</p> <p>Example</p> <p><pre><code>CreateMarker(\"marker_{r}\", vector3(-239.89, -989.42, 28.29), 5.0, 5.0, {255, 0, 0})\n</code></pre> This will be converted to \"marker_51243\", the number is the random id generated</p> To do <p> Adding more customization</p>"},{"location":"client/marker-object-blip/CreateiObject/","title":"CreateiObject","text":"<p>Create a iObject</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to manage the iObject <code>Model</code> string/number <code>-</code> The mode of the iObject <code>Coords</code> vector3 <code>-</code> The coordinates to create the iObject <code>Heading</code> number <code>-</code> The heading to create the iObject <code>Interaction Distance</code> number <code>-</code> The distance for the interaction <code>Network</code> boolean <code>-</code> If the iObject is networked or not <code>Job</code> string/table <code>-</code> The job to interact with the iObject Returns Data Type Description iObject The object handle vector3 The object coords <p>Dont need to be called every frame, if called every frame and the iObject already exist, sleep the loop for 100 ms to prevent spam</p> Example <p>Creating iObject <pre><code>local iobj, coords = CreateiObject(\"myid\", \"prop_weed_01\", vector3(-239.89, -989.42, 28.29), 0.0, 5.0)\n</code></pre></p> How to listen the interaction <p>For listen the interaction you need to use the emitter</p> <p>Example</p> <p><pre><code>-- This create the iObject\nlocal iobj, coords = CreateiObject(\"myid\", \"prop_weed_01\", vector3(-239.89, -989.42, 28.29), 0.0, 5.0)\n\n-- Listening the interaction\nOn(\"object\", function(id)\n    if id == \"myid\" then\n        print(\"Hello\")\n    end\nend)\n</code></pre> LSS: If i press E near the iObject in the F8 console will be printed <code>Hello</code></p>"},{"location":"client/marker-object-blip/DeleteMarker/","title":"DeleteMarker","text":"<p>Delete a marker by the id</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to delete the marker <p>Dont need to be called every frame, if called every frame and the marker dont exist, sleep the loop for 100 ms to prevent spam</p> Example <pre><code>DeleteMarker(\"marker\")\n</code></pre>"},{"location":"client/marker-object-blip/DeleteiObject/","title":"DeleteiObject","text":"<p>Delete a iObject</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id of the iObject <code>Delete</code> boolean <code>false</code> If is true delete the actual entity, otherwise delete only the interaction <p>Dont need to be called every frame, if called every frame and the iObject dont exist, sleep the loop for 100 ms to prevent spam</p> Example <pre><code>DeleteiObject(\"myid\", true)\n</code></pre>"},{"location":"client/marker-object-blip/DoesExist/","title":"DoesExist","text":"<p>Check if a marker/object exist</p> Argument Data Type Needed Default Description <code>Type</code> string <code>-</code> The type of the id: Marker, marker, m <code>or</code> Object, object, o <code>Id</code> string/number <code>-</code> The id Returns Data Type Description boolean True if exist, false if not exist <p>Dont need to be called every frame</p> Example <pre><code>DoesExist(\"marker\", \"myid\")\n</code></pre>"},{"location":"client/marker-object-blip/GetCoordOf/","title":"GetCoordOf","text":"<p>Get the coord from a id, return a vector3</p> Argument Data Type Needed Default Description <code>Type</code> string <code>-</code> The type of the id: Marker, marker, m <code>or</code> Object, object, o <code>Id</code> string/number <code>-</code> The id Returns Data Type Description vector3 The coords of the marker or of the iObject <p>Dont need to be called every frame</p> Example <pre><code>GetCoordOf(\"marker\", \"myid\")\n</code></pre>"},{"location":"client/marker-object-blip/GetDistanceFrom/","title":"GetDistanceFrom","text":"<p>Get distance from a id</p> Argument Data Type Needed Default Description <code>Type</code> string <code>-</code> The type of the id: Marker, marker, m <code>or</code> Object, object, o <code>Id</code> string/number <code>-</code> The id Returns Data Type Description number The distance of the marker or of the iObject <p>Dont need to be called every frame</p> Example <pre><code>GetDistanceFrom(\"marker\", \"myid\")\n</code></pre>"},{"location":"client/marker-object-blip/RandomId/","title":"RandomId","text":"<p>Generate a random id</p> Argument Data Type Needed Default Description <code>Length</code> number <code>5</code> The length of the id Returns Data Type Description number The generated id <p>Dont need to be called every frame</p> Example <pre><code>RandomId()\n</code></pre>"},{"location":"client/marker-object-blip/Set3dText/","title":"Set3dText","text":"<p>Set the text of a 3d text</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Text</code> string <code>-</code> The text to show <p>Dont need to be called every frame</p> Example <pre><code>Set3dText(\"marker\", \"Press [E] to interact\")\n</code></pre>"},{"location":"client/marker-object-blip/Set3dTextDrawRect/","title":"Set3dTextDrawRect","text":"<p>Toggle if draw the black rectangle behind the text</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Active</code> boolean <code>-</code> Active or not the black rectangle <p>Dont need to be called every frame</p> Example <pre><code>Set3dTextDrawRect(\"marker\", true)\n</code></pre>"},{"location":"client/marker-object-blip/Set3dTextFont/","title":"Set3dTextFont","text":"<p>Toggle if draw the black rectangle behind the text</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Font</code> boolean <code>-</code> The font id <p>Dont need to be called every frame</p> Example <pre><code>Set3dTextFont(\"marker\", 4)\n</code></pre>"},{"location":"client/marker-object-blip/Set3dTextScale/","title":"Set3dTextScale","text":"<p>Set the scale of a marker (only 3d text)</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Scale</code> number <code>-</code> The scale of the 3dtext <p>Dont need to be called every frame</p> Example <pre><code>Set3dTextScale(\"marker\", 0.35)\n</code></pre>"},{"location":"client/marker-object-blip/SetIdOf/","title":"SetIdOf","text":"<p>Change the id of a marker/iObject by the id</p> Argument Data Type Needed Default Description <code>Type</code> string <code>-</code> The type of the id: Marker, marker, m <code>or</code> Object, object, o <code>Id</code> string/number <code>-</code> The old id <code>New id</code> string/number <code>-</code> The new id <p>Dont need to be called every frame</p> Example <pre><code>SetIdOf(\"marker\", \"myid\", \"newid\")\n</code></pre>"},{"location":"client/marker-object-blip/SetMarker/","title":"SetMarker","text":"<p>Is the raw api that other api like <code>SetMarker</code> use. This is a more technic api that has not been thought to be used by anyone, if you don't have any idea of what this api can be, use the other already existing ones to set the data of the marker.</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Data Type</code> string <code>-</code> The type of the data inserted <code>Key</code> string <code>-</code> The marker key to change <code>Value</code> any <code>-</code> The marker new value <p>Dont need to be called every frame</p> Example <pre><code>SetMarker(\"marker\", \"string\", \"text\", \"Press [E] to interact\")\n</code></pre> Keys <pre><code>| Key     | Data Type | Explanation |\n|-----------|-----------|------------ |\n| render_distance      | number    | The distance to render the marker                             |\n| interaction_distance      | number    | The distance where the interaction is enabled                       |\n| coords     | vector3    | The coords of the marker                            |\n| slice    | number    | The slice id of the marker |\n| rgb    | table   | The rgb color of the marker |\n| _type      | number   | The number of the marker (0 = 3d Text, 1 = Normal Marker)      |\n| text | string   | The text of the 3d text, if is a 3d text |\n| _direction | vector3 | The direction of the marker |\n| _rot | vector3 | The rotation of the marker |\n| _scale | vector3 | The scale of the marker |\n| alpha | number | The alpha of the marker (0-255) |\n| anim | boolean | Toggle the bouncing animation |\n| notify | string | The ButtonNotification text already converted to the GTA button style |\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerAlpha/","title":"SetMarkerAlpha","text":"<p>Set the alpha of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Alpha</code> number <code>-</code> The marker alpha, from 0 to 255 <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerAlpha(\"marker\", 255)\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerAnimation/","title":"SetMarkerAnimation","text":"<p>Set the bouncing animation of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Animation</code> boolean <code>-</code> Use or no the bouncing animation <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerAnimation(\"marker\", true)\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerColor/","title":"SetMarkerColor","text":"<p>Set the color of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Color</code> table <code>-</code> The marker color (RGB) <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerColor(\"marker\", {255, 0, 255})\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerCoords/","title":"SetMarkerCoords","text":"<p>Set the coords of the marker by the id</p> Argument Data type Needed Default Description <code>id</code> string/number <code>-</code> The id to update the marker <code>coords</code> vector3 <code>-</code> The marker coords <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerCoords(\"marker\", vector3(0.0, 0.0, 0.0))\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerDirection/","title":"SetMarkerDirection","text":"<p>Set the direction of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Direction</code> vector3 <code>-</code> The marker direction <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerDirection(\"marker\", vector3(0.0, 0.0, 0.0))\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerDrawOnEntity/","title":"SetMarkerDrawOnEntity","text":"<p>Set the DrawOnEntity of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>DrawOnEntity</code> boolean <code>-</code> The marker DrawOnEntity <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerDrawOnEntity(\"marker\", true)\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerInteractionDistance/","title":"SetMarkerInteractionDistance","text":"<p>Set the interaction distance of the marker by the id</p> Argument Data type Needed Default Description <code>id</code> string/number <code>-</code> The id to update the marker <code>distance</code> number <code>-</code> The new marker interaction distance <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerInteractionDistance(\"marker\", 4.0)\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerNotify/","title":"SetMarkerNotify [New]","text":"<p>Set the notify of the marker by the id</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Notify</code> string <code>-</code> The ButtonNotification data <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerNotify(\"marker\", \"Press [E] to interact\")\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerRenderDistance/","title":"SetMarkerRenderDistance","text":"<p>Set the render distance of the marker by the id</p> Argument Data type Needed Default Description <code>id</code> string/number <code>-</code> The id to update the marker <code>distance</code> number <code>-</code> The new marker render distance <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerRenderDistance(\"marker\", 4.0)\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerRotation/","title":"SetMarkerRotation","text":"<p>Set the rotation of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Rotation</code> vector3 <code>-</code> The marker rotation <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerRotation(\"marker\", vector3(0.0, 1.0, 0.0))\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerScale/","title":"SetMarkerScale","text":"<p>Set the scale of the marker by the id</p> Argument Data type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Scale</code> vector3 <code>-</code> The marker scale <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerscale(\"marker\", vector3(1.0, 1.0, 1.5))\n</code></pre>"},{"location":"client/marker-object-blip/SetMarkerType/","title":"SetMarkerType","text":"<p>Set the type of the marker by the id</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to update the marker <code>Type</code> number <code>-</code> The marker type <p>Dont need to be called every frame</p> Example <pre><code>SetMarkerType(\"marker\", 2)\n</code></pre>"},{"location":"client/misc/AddPercentage/","title":"AddPercentage","text":"<p>Add a percentage to a number.</p> Argument Data Type Needed Default Description <code>Number</code> number <code>-</code> The number to add the percentage to <code>Percentage</code> number <code>-</code> The percentage to add <p>Dont need to be called every frame</p> Example <pre><code>local p = AddPercentage(10, 20)\nlocal p2 = AddPercentage(40, 20)\n\nprint(p, p2)\n</code></pre> Expected result <pre><code>12, 48\n</code></pre>"},{"location":"client/misc/DevMode/","title":"DevMode","text":"<p>Only for development, turn on the log for anything done by the utility</p> Argument Data Type Needed Default Description <code>Status</code> boolean <code>-</code> Turn on or off the devmode <code>Time</code> boolean <code>true</code> Turn on or off the time off the log <code>Format</code> string <code>%s %s %s</code> The formatting for the log <p>Dont need to be called every frame</p> Example <p>The first is the action, the second the type, the third the id <pre><code>DevMode(true, true, \"%s | %s | %s\")\n</code></pre>  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0^ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Action\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Type\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Id</p>"},{"location":"client/misc/FindInTable/","title":"FindInTable","text":"<p>Return the index of the first row in the table that matches the given criteria.</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table to search. <code>Text</code> string <code>-</code> The text to search for. <p>Dont need to be called every frame</p> Example <pre><code>local table = {\n    \"Jhon\",\n    \"Doe\",\n    \"Smith\",\n    \"Robinson\",\n    \"Smith\",\n    \"George\"\n}\n\nlocal i = FindInTable(table, \"Smith\")\n\nprint(i)\n</code></pre> Expected result <pre><code>3\n</code></pre>"},{"location":"client/misc/GetRandom/","title":"GetRandom","text":"<p>Return a random value from the given table, use indexes to random the value.</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table to get a random index from <p>Dont need to be called every frame</p> Example <pre><code>local table = {\n    \"Jhon\",\n    \"Doe\",\n    \"Smith\",\n    \"Robinson\",\n    \"Smith\",\n    \"George\"\n}\n\nlocal r = GetRandom(table)\nlocal r2 = GetRandom(table)\n\nprint(r, r2)\n</code></pre> Expected result <pre><code>Smith,  George\n</code></pre>"},{"location":"client/misc/Probability/","title":"Probability","text":"<p>Pick a random number between 0 and 100, and if is lower or equal than the given value, return true.</p> Argument Data Type Needed Default Description <code>Number</code> number <code>-</code> The number to compare with <p>Dont need to be called every frame</p> Example <pre><code>local p = Probability(10)\nlocal p2 = Probability(100)\n\nprint(p, p2)\n</code></pre> Expected result <pre><code>false,  true\n</code></pre>"},{"location":"client/misc/RemovePercentage/","title":"RemovePercentage","text":"<p>Remove a percentage to a number.</p> Argument Data Type Needed Default Description <code>Number</code> number <code>-</code> The number to remove the percentage to <code>Percentage</code> number <code>-</code> The percentage to remove <p>Dont need to be called every frame</p> Example <pre><code>local p = RemovePercentage(10, 20)\nlocal p2 = RemovePercentage(40, 20)\n\nprint(p, p2)\n</code></pre> Expected result <pre><code>8, 32\n</code></pre>"},{"location":"client/misc/ReplaceTexture/","title":"ReplaceTexture","text":"<p>Replace a texture</p> Argument Data Type Needed Default Description <code>dict</code> string <code>-</code> The dict to replace the texture <code>Texture Name</code> string <code>-</code> The original texture name, you can found it with OpenIV <code>Url</code> string <code>-</code> The url of the texture, can be a: .gif, .png, .jpg or a website (it can also be a nui) <code>Width</code> number <code>-</code> The width of the texture <code>Height</code> number <code>-</code> The height of the texture <p>Dont need to be called every frame</p> Example <p><pre><code>ReplaceTexture(\"v_corp_facebeanbagd\", \"km_xj_v_beanbag\", \"https://gifer.com/en/embed/SBMP\", 300, 300)\n</code></pre> If dont start click me</p> How to find the texture name <p>Download OpenIV and setup it (follow the video until 3:50)</p> <p>When you are on OpenIV turn on the <code>Edit Mode</code> (in the top-right) </p> <p>Click <code>Yes</code></p> <p>Ok, search the model name of the prop you want to find the texture name, for the tutorial i use this prop: v_corp_facebeanbagd </p> <p>And click <code>Search \"v_corp_facebeanbagd\"</code> </p> <p>Wait that OpenIV search in the all directory the prop you have choose and then double click on the <code>v_corp_facebeanbagd.ydr</code> or <code>v_corp_facebeanbagd.yft</code></p> <p>For me is a ydr </p> <p>Ok, now open the file, a model will show up </p> <p>Click on <code>View embedded textures</code> in the bottom-right</p> <p>Some texture will show up, you need to choose the right texture, for me there is only one </p> <p>So, we have finished, <code>km_xj_v_beanbag</code> is the textureName and <code>v_corp_facebeanbagd</code> is the dict</p>"},{"location":"client/misc/StopCurrentTaskAndWatchPlayer/","title":"StopCurrentTaskAndWatchPlayer","text":"Argument Data Type Needed Default Description <code>ped</code> Ped <code>-</code> <code>duration</code> number <code>2000</code> <p>Dont need to be called every frame</p> Example <pre><code>StopCurrentTaskAndWatchPlayer(ped, 2000)\n</code></pre>"},{"location":"client/misc/_g/","title":"_g","text":"<p>Register a global variable on all scripts that load the Utility</p> Argument Data Type Needed Default Description <code>Name</code> string <code>-</code> The name of the variable <code>Value</code> any <code>-</code> The value of the variable <p>Warning</p> <p>Any other resource where you want to use the global variable must be started BEFORE the resource where you define the variable</p> <p>Dont need to be called every frame</p> Example <p>I create the global on the script <code>this_is_a_test</code> <pre><code>_g(\"utility\", \"Utility is amazing!\")\n</code></pre></p> <p>If I go in another script that has the Utility loaded and printout the variable <code>utility</code> it will write \"Utility is amazing!\".</p> Expected result <p>Resource \"this_is_a_test\": <pre><code>print(utility)\n</code></pre> Return <code>Utility is amazing!</code></p> <p>Resource \"this_is_another_resource\": <pre><code>print(utility)\n</code></pre> Return <code>Utility is amazing!</code></p>"},{"location":"client/misc/apairs/","title":"apairs","text":"<p>Pairs a table in alphabetical order</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table <p>Dont need to be called every frame</p> Example <pre><code>local table = {\n    [\"Z\"] = true,\n    [\"B\"] = true,\n    [\"A\"] = true,\n    [\"G\"] = true\n}\n\n\nfor k,v in apairs(table) do\n    print(k,v)\nend\n</code></pre> Expected result <pre><code>A   true\nB   true\nG   true\nZ   true\n</code></pre>"},{"location":"client/misc/printd/","title":"printd","text":"<p>Dump a table, simply convert a table to a string</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table to dump <code>Advanced</code> boolean <code>false</code> Is true return an advanced dump of the table Returns Data Type Description string The dumped table <p>Dont need to be called every frame</p> Example <pre><code>local _table = {\n    message = \"Hello\"\n}\n\nprintd(_table)\n</code></pre> Expected Results <pre><code>{\n    \"message\": \"Hello\"\n}\n</code></pre>"},{"location":"client/misc/string.multigsub/","title":"string.multigsub","text":"<p>Replace multiple part of a string</p> Argument Data Type Needed Default Description <code>String</code> string <code>-</code> The original texture <code>Pattern</code> table <code>-</code> The pattern to find and replace <code>Replacement</code> table <code>-</code> The replacemente table <p>Dont need to be called every frame</p> Example <pre><code>local string = \"i love me\"\n\nlocal new_string = string.multigsub(string, {\"love\", \"me\"}, {\"hate\", \"you\"})\n\nprint(new_string)\n</code></pre> Expected result <p><code>i hate you</code></p>"},{"location":"client/misc/table.clone/","title":"table.clone","text":"<p>Clone a table</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The original table Returns Data Type Description table The cloned table <p>Dont need to be called every frame</p> Example <pre><code>local tabletoclone = {\n    msg = \"Hello\"\n}\n\nlocal cloned_table = table.clone(tabletoclone)\n\nprint(cloned_table.msg)\n</code></pre> Expected result <p><code>Hello</code></p>"},{"location":"client/misc/table.empty/","title":"table.empty","text":"<p>Check if a table is empty</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table Returns Data Type Description boolean True if is empty, false if have some data <p>Dont need to be called every frame</p> Example <pre><code>local emptytable = {}\n\nprint(table.empty(emptytable))\n</code></pre> Expected result <p><code>true</code></p>"},{"location":"client/misc/table.fexist/","title":"table.fexist","text":"<p>Check if the field exist in the table</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table <code>Field</code> string <code>-</code> The field to check Returns Data Type Description boolean True if field exist, false if field dont exist <p>Dont need to be called every frame</p> Example <pre><code>local tabletocheck = {\n    msg = \"Message\",\n    another = 2\n}\n\nprint(table.fexist(tabletocheck, \"msg\"))\nprint(table.fexist(tabletocheck, \"utility\"))\n</code></pre> Expected result <p><code>true</code> <code>false</code></p>"},{"location":"client/misc/table.remove/","title":"table.remove","text":"<p>Equal to the native table.remove of lua but accept string as position</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table <code>Position</code> number/string <code>-</code> The position of the data to remove <p>Dont need to be called every frame</p> Example <pre><code>local tabletocheck = {\n    [\"Hello\"] = 5,\n    [\"Utility\"] = 1,\n}\n\ntable.remove(tabletocheck, \"Hello\")\n\nprint(json.encode(tabletocheck))\n</code></pre> Expected result <p><code>{\"Utility\":1}</code></p>"},{"location":"client/native/ButtonFor/","title":"ButtonFor","text":"<p>Shows a notification in the top-right that support the displaying button inputs for a defined ms</p> Argument Data Type Needed Default Description <code>Message</code> string <code>-</code> The message to show <code>Duration</code> number <code>-</code> The duration time in milliseconds (ms) <p>Dont need to be called every frame</p> Example <pre><code>ButtonFor(\"Example\", 5000)\n</code></pre> Tip <p>If you write <code>{any_letter}</code> the content will be converted to button inputs</p> <p>Example:<code>ButtonFor(\"A simple message {X} {D}\", 5000)</code></p> <p>Result:</p>"},{"location":"client/native/ButtonNotification/","title":"ButtonNotification","text":"<p>Shows a notification in the top-right that support the displaying button inputs</p> Argument Data Type Needed Default Description <code>Message</code> string <code>-</code> The message to show <p>Need to be called every frame</p> Example <pre><code>ButtonNotification(\"Example\")\n</code></pre> Tip <p>If you write <code>{any_letter}</code> the content will be converted to button inputs</p> <p>Example:<code>ButtonNotification(\"A simple message {X} {D}\")</code></p> <p>Result:</p>"},{"location":"client/native/CreateLoop/","title":"CreateLoop","text":"<p>Create a while true do loop, in the callback send the loopId</p> Argument Data Type Needed Default Description <code>Function</code> function <code>-</code> The code executed in the loop <code>Time</code> number <code>5</code> The time express in millisenconds (ms) of the execution Returns Data Type Description loopId The id of the loop <p>Dont need to be called every frame</p> Example <p>Without time: <pre><code>CreateLoop(function(loopId)\n    print(\"Test\")\nend)\n</code></pre> With time: <pre><code>CreateLoop(function()\n    print(\"Test\")\nend, 500)\n</code></pre></p> Old method <pre><code>Citizen.CreateThread(function()\n    while true do\n        print(\"Test\")\n        Citizen.Wait(5)\n    end\nend)\n</code></pre> Old problem <p>In the old method if you forgot to insert <code>Citizen.Wait(ms)</code> the ALL server will crashI created it because i was sick of the thousands of times my server crashed, Thanks FiveM \ud83d\ude09</p>"},{"location":"client/native/CreateMissionText/","title":"CreateMissionText","text":"<p>Create a mission text at the bottom of the screen</p> Argument Data Type Needed Default Description <code>msg</code> string <code>-</code> The message to show <code>duration</code> number <code>\u221e</code> The duration of the mission text (ms) Returns Data Type Description table A table with the delete method to clear the mission text <p>Dont need to be called every frame</p> Example <pre><code>local mission = CreateMissionText(\"Hello World\", 5000)\nCitizen.Wait(5000)\nmission:delete()\n</code></pre>"},{"location":"client/native/CreateObject/","title":"CreateObject","text":"<p>Is equal to the standard one but dont need to load or request the model</p> Argument Data Type Needed Default Description <code>ModelHash</code> string/hash <code>-</code> The hash or the name of the model <code>Coords</code> vector3/number <code>-</code> The coordinates to create the object (can be an vector3 or you can insert it one by one) <code>IsNetwork</code> boolean <code>false</code> Whether to create a network object for the object. If false, the object exists only locally. Returns Data Type Description object A script handle (fwScriptGuid index) for the object, or 0 if the object failed to be created netId The net id <p>Dont need to be called every frame</p> Example <p>Using vector3 <pre><code>local obj, netId = CreateObject(\"prop_weed_01\", vector3(0.0, 0.0, 0.0), true, false, false)\n</code></pre> Using separated coords <pre><code>local obj, netId = CreateObject(\"prop_weed_01\", 0.0, 0.0, 0.0, true, false, false)\n</code></pre></p> Old method <pre><code>local modelHash = GetHashKey(\"prop_weed_01\")\n\nif not HasModelLoaded(modelHash) then\n    RequestModel(modelHash);\n    while not HasModelLoaded(modelHash) do \n        Citizen.Wait(1); \n    end  \nend\n\nlocal obj = CreateObject(modelHash, 0.0, 0.0, 0.0, true, false, false)\nSetModelAsNoLongerNeeded(modelHash) \n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_CreateObject</code></p>"},{"location":"client/native/CreatePed/","title":"CreatePed","text":"<p>Is equal to the standard one but dont need to load or request the model</p> Argument Data Type Needed Default Description <code>Model</code> string/number <code>-</code> The hash or the name of the model <code>Coords</code> vector3/number <code>-</code> The coordinates to create the ped (can be an vector3 or you can insert it one by one) <code>Heading</code> number <code>-</code> The heading to create the ped <code>IsNetwork</code> boolean <code>-</code> Whether to create a network object for the ped. If false, the ped exists only locally. Returns Data Type Description ped A script handle (fwScriptGuid index) for the ped, or 0 if the ped failed to be created. netId The net id <p>Dont need to be called every frame</p> Example <p>Using vector3 <pre><code>local ped, netId = CreatePed(\"cs_dale\", vector3(0.0, 0.0, 0.0), 5.0, true)\n</code></pre> Using separated coords <pre><code>local ped, netId = CreatePed(\"cs_dale\", 0.0, 0.0, 0.0, 5.0, true)\n</code></pre></p> Old method <pre><code>local modelHash = GetHashKey(\"cs_dale\")\n\nif not HasModelLoaded(modelHash) then\n    RequestModel(modelHash);\n    while not HasModelLoaded(modelHash) do \n        Citizen.Wait(1); \n    end  \nend\n\nlocal ped = CreatePed(0, modelHash, 0.0, 0.0, 0.0, 5.0, true, false)\nSetModelAsNoLongerNeeded(modelHash) \n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_CreatePed</code></p>"},{"location":"client/native/CreateVehicle/","title":"CreateVehicle","text":"<p>Is equal to the standard one but dont need to load or request the model</p> Argument Data Type Needed Default Description <code>ModelHash</code> string/hash <code>-</code> The hash or the name of the model <code>Coords</code> vector3/number <code>-</code> The coordinates to create the object (can be an vector3 or you can insert it one by one) <code>Heading</code> number <code>0</code> Heading to face towards, in degrees. <code>IsNetwork</code> boolean <code>false</code> Whether to create a network object for the vehicle. If false, the vehicle exists only locally. <code>NetMissionEntity</code> boolean <code>false</code> Whether to register the vehicle as pinned to the script host in the R* network model. Returns Data Type Description vehicle A script handle (fwScriptGuid index) for the vehicle, or 0 if the vehicle failed to be created netId The net id <p>Dont need to be called every frame</p> Example <p>Using vector3 <pre><code>local veh, netId = CreateVehicle(\"t20\", vector3(0.0, 0.0, 0.0), 0.0, true, false)\n</code></pre> Using separated coords <pre><code>local veh, netId = CreateVehicle(\"t20\", 0.0, 0.0, 0.0, 0.0, true, false)\n</code></pre></p> Old method <pre><code>local modelHash = GetHashKey(\"t20\")\n\nif not HasModelLoaded(modelHash) then\n    RequestModel(modelHash);\n    while not HasModelLoaded(modelHash) do \n        Citizen.Wait(1); \n    end  \nend\n\nlocal obj = CreateVehicle(modelHash, 0.0, 0.0, 0.0, 0.0, true, false)\nSetModelAsNoLongerNeeded(modelHash) \n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_CreateVehicle</code></p>"},{"location":"client/native/DebugCoords/","title":"DebugCoords","text":"<p>Create a \"V\" at the provided coords for debugging the coords position</p> Argument Data Type Needed Default Description <code>coords</code> vector3 <code>-</code> <p>Dont need to be called every frame</p> Example <pre><code>DebugCoords(vector3(0.0, 0.0, 0.0))\n</code></pre>"},{"location":"client/native/DeleteEntity/","title":"DeleteEntity","text":"<p>Is equal to the standard one but request the control of the entity to prevent any deletion bug and set the entity as mission entity, can accept a netId</p> Argument Data Type Needed Default Description <code>Entity</code> entity/netId <code>-</code> The entity handle or the netId of the entity <code>IsNetwork</code> boolean <code>false</code> If is true the entity arguments become the netId and find and delete the entity by the netId <p>Dont need to be called every frame</p> Example <p>Using entity handle <pre><code>DeleteEntity(entity, false)\n</code></pre> Using netId <pre><code>DeleteEntity(netId, true)\n</code></pre></p> Old method <pre><code>SetEntityAsMissionEntity(entity)\nDeleteEntity(entity)\n</code></pre> Old method problem <p>Sometimes the entity is not deleted because the entity was created by another client</p> Using old native <p>although i dont recommend it, you can use the old native via <code>old_DeleteEntity</code></p>"},{"location":"client/native/DisableControlAction/","title":"DisableControlAction","text":"<p>Disable a key, need to be called every tick</p> Argument Data Type Needed Default Description <code>Control</code> string <code>-</code> The key to disable <code>Disable</code> boolean <code>true</code> Disable or no <p>Need to be called every frame</p> Example <pre><code>CreateLoop(function()\n    DisableControlAction(\"K\")\nend)\n</code></pre> Old method <pre><code>Citizen.CreateThread(function()\n    while true do\n        DisableControlAction(0, 311, true)\n        Citizen.Wait(1)\n    end\nend)\n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_DisableControlAction</code></p>"},{"location":"client/native/DisableControlForSeconds/","title":"DisableControlForSeconds","text":"<p>Disable a key for inserted seconds</p> Argument Data Type Needed Default Description <code>Control</code> string <code>-</code> The key to disable <code>Seconds</code> number <code>-</code> The seconds which the button is disabled <p>Dont need to be called every frame</p> Example <pre><code>DisableControlForSeconds(\"K\", 5)\n</code></pre>"},{"location":"client/native/DrawText3Ds/","title":"DrawText3Ds","text":"<p>Draws 3D text on the specified coords</p> Argument Data Type Needed Default Description <code>Coords</code> vector3 <code>-</code> The coordinates to create the 3d text <code>Text</code> string <code>-</code> The text <code>Scale</code> number <code>0.35</code> The scale of the text <code>Font</code> number <code>4</code> The font, on the fivem native reference there isnt a list <p>Need to be called every frame</p> Example <pre><code>DrawText3Ds(vector3(0.0, 0.0, 0.0), \"Test\")\n</code></pre>"},{"location":"client/native/GenerateRandomCoords/","title":"GenerateRandomCoords","text":"<p>Generate a random coords around the base coords</p> Argument Data Type Needed Default Description <code>Coords</code> vector3 <code>-</code> The coords <code>Radius</code> number <code>-</code> The limit for the generation <code>Heading</code> boolean <code>false</code> If true return a second parameter that is a random generated heading Returns Data Type Description vector3 The generated coords heading The generated heading (only if the heading argument is true) <p>Dont need to be called every frame</p> Example <pre><code>local coords = GenerateRandomCoords(GetEntityCoords(PlayerPedId()), 10.0)\n</code></pre>"},{"location":"client/native/GetEntitySize/","title":"GetEntitySize","text":"<p>Return the entity size in a vector3</p> Argument Data Type Needed Default Description <code>entity</code> entity `` Returns Data Type Description vector3 The generated coords <p>Dont need to be called every frame</p> Example <pre><code>GetEntitySize(entity)\n</code></pre>"},{"location":"client/native/GetEntitySurfaceMaterial/","title":"GetEntitySurfaceMaterial","text":"<p>Returns the hash of the ground material where the entity is in</p> Argument Data Type Needed Default Description <code>Entity</code> entity <code>-</code> The entity being checked Returns Data Type Description materialHash The material hash of the ground <p>Dont need to be called every frame</p> Example <pre><code>local materialHash = GetEntitySurfaceMaterial(entity)\n</code></pre>"},{"location":"client/native/GetLoadoutOfPed/","title":"GetLoadoutOfPed","text":"<p>Returns the ped weapons loadout</p> Argument Data Type Needed Default Description <code>Ped</code> ped `` The ped Returns Child Data Type Description name string Weapon model name hash number Hash of the weapon ammo number Weapon ammo <p>Dont need to be called every frame</p> Example <pre><code>local loadout = GetLoadoutOfPed(ped)\n\nfor i=1, #loadout do\n    print(\"Weapon model = \"..loadout[i].name..\" Weapon Hash = \"..loadout[i].hash..\" Weapon Ammo = \"..loadout[i].ammo)\nend\n</code></pre>"},{"location":"client/native/GetPlayerName/","title":"GetPlayerName","text":"<p>Returns the player name, the difference between the standrard one and this one is that this one have the playerid has default</p> Argument Data Type Needed Default Description <code>PlayerId</code> number <code>playerId</code> The local player id Returns Data Type Description name The player name <p>Dont need to be called every frame</p> Example <pre><code>GetPlayerName()\n</code></pre>"},{"location":"client/native/GetWorldClosestPed/","title":"GetWorldClosestPed","text":"<p>Return the closest ped, and the all founded ped</p> Argument Data Type Needed Default Description <code>Radius</code> number <code>-</code> The radius that being checked Returns Data Type Description ped The closest ped table All the founded ped <p>Dont need to be called every frame</p> Example <pre><code>local closest, allped = GetWorldClosestPed(5.0)\n</code></pre>"},{"location":"client/native/GetWorldClosestPlayer/","title":"GetWorldClosestPlayer","text":"<p>Return the closest player, and the all founded player</p> Argument Data Type Needed Default Description <code>Radius</code> number <code>-</code> The radius that being checked Returns Data Type Description player The closest player table All the founded player <p>Dont need to be called every frame</p> Example <pre><code>local closest, allplayer = GetWorldClosestPlayer(5.0)\n</code></pre>"},{"location":"client/native/InTimeRange/","title":"InTimeRange","text":"<p>Checks if the time is within the specified time range (24h format)</p> Argument Data Type Needed Default Description <code>Min</code> number <code>-</code> The minimum time in hour <code>Max</code> number <code>-</code> The maximum time in hour <code>UTC</code> number <code>false</code> If this is true, use the UTC time to check the range <p>Dont need to be called every frame</p> Example <pre><code>if InTimeRange(15, 18) then\n    print(\"It's between 15 and 18\")\nend\n</code></pre>"},{"location":"client/native/IsControlJustPressed/","title":"IsControlJustPressed","text":"<p>Call a callback when a specific key was pressed, more optimized and easy to use</p> Argument Data Type Needed Default Description <code>Control</code> string <code>-</code> The key, this is the list <code>Callback</code> function <code>-</code> The code executed when the key was pressed <code>Description</code> string <code>-</code> <p>Dont need to be called every frame</p> Example <p>Run at 0 ms <pre><code>IsControlJustPressed(\"K\", function()\n    print(\"Hello\")\nend)\n</code></pre></p> Curiosity <p>\"Control\" parameter also accepts I/O from MOUSE_BUTTON or PAD_DIGITALBUTTON mappers, it will automatically figure out if it is keyboard, mouse or pad</p> Old method <p>Run at 2/3 ms <pre><code>Citizen.CreateThread(function()\n    while true do\n        if IsControlJustPressed(0, 311) then\n            print(\"Hello\")\n        end\n        Citizen.Wait(1)\n    end\nend)\n</code></pre></p> IsControlJustPressed <p>although i dont recommend it, you can use the old native via <code>old_IsControlJustPressed</code></p>"},{"location":"client/native/IsEntityFrozen/","title":"IsEntityFrozen","text":"<p>Check if the entity is frozen</p> Argument Data Type Needed Default Description <code>entity</code> entity <code>-</code> The entity to check Returns Data Type Description boolean True if is frozen, false if not <p>Dont need to be called every frame</p> Example <pre><code>IsEntityFrozen(entity)\n</code></pre>"},{"location":"client/native/IsInRadius/","title":"IsInRadius","text":"<p>Check the distance between 2 coords and return true if is in radius</p> Argument Data Type Needed Default Description <code>Coords 1</code> vector3 <code>-</code> The first coords (probably the entity coords) <code>Coords 2</code> vector3 <code>-</code> The second coords <code>Radius</code> number <code>-</code> The distance to check <code>Sphere</code> boolean <code>false</code> Draw a sphere of the radius Returns Data Type Description boolean If is in the radius <p>Dont need to be called every frame</p> Example <pre><code>local near = IsInRadius(GetEntityCoords(entity), vector3(0.0,0.0,0.0), 10.0)\n</code></pre>"},{"location":"client/native/IsNearCoords/","title":"IsNearCoords","text":"<p>Check if the player is near to a coords</p> Argument Data Type Needed Default Description <code>Coords</code> vector3 <code>-</code> The coords <code>Radius</code> number <code>-</code> The distance to check <code>Sphere</code> boolean <code>false</code> Draw a sphere of the radius Returns Data Type Description boolean If is in the radius <p>Dont need to be called every frame</p> Example <pre><code>local near = IsNearCoords(vector3(0.0,0.0,0.0), 10.0)\n</code></pre>"},{"location":"client/native/LoopThread/","title":"LoopThread","text":"<p>It will create a thread in the loop, the code inserted into the function will be executed each time for the inserted time, it can be used for optimize code (See example)</p> Argument Data Type Needed Default Description <code>LoopId</code> number <code>-</code> The loop id <code>Id</code> string/number <code>-</code> The id to identify the thread <code>Time</code> number <code>-</code> The time express in millisenconds (ms) of the execution <code>Function</code> function <code>-</code> The code executed in the loop thread Returns Data Type Description number The handle of the LoopThread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function</p> Example <p>How it can be used for optimization: <pre><code>local Luck = 1\n\nCreateLoop(function(loopId)\n    LoopThread(loopId, \"main\", 500, function()\n        Luck = Luck + 1\n    end)\n\n    print(Luck)\nend, 250)\n</code></pre></p> Expected Results <p>The thread overlaps because the thread time is a multiple of the time loop (in that case 2 or 3)</p> <p>1 1</p> <p>2 2 2</p> <p>3 3</p> <p>4 4</p> <p>5 5 5 ...etc</p> <p>How it works: <pre><code>CreateLoop(function(loopId)\n    print(\"Start\")\n    LoopThread(loopId, \"main\", 1000, function()\n        print(\"Loop Thread\")\n    end)\n    print(\"End\")\nend, 500)\n</code></pre></p> Expected Results <p>The thread overlaps because the thread time is a multiple of the time loop (in that case 2 or 3)</p> <p>Start End</p> <p>Start LoopThread End</p> <p>Start End</p> <p>Start LoopThread End</p> <p>Start End ...etc</p>"},{"location":"client/native/MakeEntityFaceEntity/","title":"MakeEntityFaceEntity","text":"<p>Makes the two entities look in the eye</p> Argument Data Type Needed Default Description <code>Entity 1</code> entity <code>-</code> The first entity <code>Entity 2</code> entity <code>-</code> The second entity <code>What entity</code> boolean <code>false</code> If true make the entity1 rotate to the entity2, otherwise the entity2 rotate to the entity1 <p>Dont need to be called every frame</p> Example <pre><code>MakeEntityFaceEntity(entity1, entity2)\n</code></pre>"},{"location":"client/native/PauseLoop/","title":"PauseLoop","text":"<p>Pause a loop, the loop stop to work but can be resumed later</p> Argument Data Type Needed Default Description <code>loopid</code> number <code>-</code> The loop id <p>Dont need to be called every frame</p> Example <pre><code>PauseLoop(loopId)\n</code></pre>"},{"location":"client/native/PlayerPedId/","title":"PlayerPedId","text":"<p>Is equal to the standard one but get the data from a saved variable</p> Returns Data Type Description ped The player ped handle <p>Dont need to be called every frame</p> Example <pre><code>PlayerPedId()\n</code></pre>"},{"location":"client/native/RegisterNetEvent/","title":"RegisterNetEvent","text":"<p>Register a net event that can be called by the client or the server,The event have the AddEventHandler already loaded</p> Argument Data Type Needed Default Description <code>EventName</code> string <code>-</code> The name of the event <code>Function</code> function <code>-</code> The code executed when the event was triggered <p>Dont need to be called every frame</p> Example <pre><code>RegisterNetEvent(\"utility_libs:ILoveYou\", function()\n    print(GetPlayerName()..\" love the utility_libs, how to blame it?\")\nend)\n</code></pre> Old method <pre><code>RegisterNetEvent(\"utility_libs:ILoveYou\")\nAddEventHandler(\"utility_libs:ILoveYou\", function()\n    print(GetPlayerName(PlayerId())..\" love the utility_libs, how to blame it?\")\nend)\n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_RegisterNetEvent</code></p>"},{"location":"client/native/ResumeLoop/","title":"ResumeLoop","text":"<p>Resume a stopped loop</p> Argument Data Type Needed Default Description <code>loopid</code> number <code>-</code> The loop id <p>Dont need to be called every frame</p> Example <pre><code>ResumeLoop(loopId)\n</code></pre>"},{"location":"client/native/ResumeLoopThread/","title":"ResumeLoopThread","text":"<p>Resume a stopped thread identified by the id inserted</p> Argument Data Type Needed Default Description <code>LoopId</code> number <code>-</code> The loop id <code>Id</code> string/number <code>-</code> The id of the loop thread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function where you created the thread</p> Example <pre><code>ResumeLoopThread(\"main\")\n</code></pre>"},{"location":"client/native/SetEntityModel/","title":"SetEntityModel","text":"<p>Change the model of a entity over the network (also with local entities)</p> Argument Data Type Needed Default Description <code>entity</code> entity <code>-</code> <code>model</code> string/number <code>-</code> The new model <p>Dont need to be called every frame</p> Example <pre><code>SetEntityModel(obj, \"prop_weed_01\")\n</code></pre>"},{"location":"client/native/SetPedStatic/","title":"SetPedStatic","text":"<p>Freeze the ped, make it ignore any event (ex. shooting) and puts it invincible</p> Argument Data Type Needed Default Description <code>ped</code> entity <code>-</code> The ped that need to be modified <code>active</code> boolean <code>-</code> If active or no <p>Dont need to be called every frame</p> Example <pre><code>SetPedStatic(ped, true)\n</code></pre> Old method <pre><code>FreezeEntityPosition(ped, true)\nSetEntityInvincible(ped, true)\nSetBlockingOfNonTemporaryEvents(ped, true)\n</code></pre>"},{"location":"client/native/SetVehicleWheelsPowered/","title":"SetVehicleWheelsPowered","text":"<p>Gives or takes power (energy) away from the wheels of the vehicle, simply if put on false the wheels of the vehicle will not turn anymore</p> Argument Data Type Needed Default Description <code>Vehicle</code> vehicle <code>-</code> The vehicle <code>Active</code> boolean <code>-</code> If its true give power to the wheels, otherwise remove the power from the wheels <p>Dont need to be called every frame</p> Example <pre><code>SetVehicleWheelsPowered(veh, false)\n</code></pre>"},{"location":"client/native/ShowNotification/","title":"ShowNotification","text":"<p>Draw a notification in the bottom-left</p> Argument Data Type Needed Default Description <code>Message</code> string <code>-</code> The message to show <p>Dont need to be called every frame</p> Example <pre><code>ShowNotification(\"Example\")\n</code></pre> Tip"},{"location":"client/native/ShowNotification/#supported-color-syntax","title":"Supported Color Syntax","text":"Syntax Color ~r~ <p>Red</p> ~b~ <p>Blue</p> ~g~ <p>Green</p> ~y~ <p>Yellow</p> ~p~ <p>Purple</p> ~o~ <p>Orange</p> ~c~ <p>Grey</p> ~m~ <p>Dark Grey</p> ~u~ <p>Black</p> ~n~ New Line ~s~ White (default) ~w~ White ~h~ Bold \u2211 Rockstar Icon \u00a6 Rockstar Verified Icon <code>ShowNotification(\"\u2211\u00f7\u00a6~r~ r ~b~ b ~g~ g ~y~ y ~p~ p ~c~ gr ~m~ d gr ~u~ bl ~o~ or ~s~ re ~n~ nl ~h~ Bold\")</code>"},{"location":"client/native/StartParticleFxOnNetworkEntity/","title":"StartParticleFxOnNetworkEntity","text":"<p>Create particles on a networked entity, obviously the particles will also be synchronized</p> Argument Data Type Needed Default Description <code>ptxAsset</code> string <code>-</code> The ptfx dictionary (core, etc..) <code>name</code> string <code>-</code> The particle name <code>obj</code> number <code>-</code> The client entity (not netid) <code>offset</code> vector3 <code>-</code> <code>rot</code> vector3 <code>-</code> <code>scale</code> number <code>-</code> <code>axis</code> number <code>-</code> <p>Dont need to be called every frame</p> Example <pre><code>StartParticleFxOnNetworkEntity(\"scr_ornate_heist\", \"scr_heist_ornate_thermal_burn\", thermal, vector3(0.0, 1.0, -0.1), vector3(0.0, 0.0, 0.0), 1.0)\n</code></pre>"},{"location":"client/native/StopLoop/","title":"StopLoop","text":"<p>Stop a loop</p> Argument Data Type Needed Default Description <code>loopid</code> number <code>-</code> The loop id <p>Dont need to be called every frame</p> Example <pre><code>StopLoop(loopId)\n</code></pre>"},{"location":"client/native/StopLoopThread/","title":"StopLoopThread","text":"<p>Stop the loop thread identified by the id inserted</p> Argument Data Type Needed Default Description <code>LoopId</code> number <code>-</code> The loop id <code>Id</code> string/number <code>-</code> The id of the loop thread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function where you created the thread</p> Example <pre><code>StopLoopThread(\"main\")\n</code></pre>"},{"location":"client/native/Task/","title":"Task","text":"<p>It will create a thread in the loop with a default time, can be stopped by the <code>StopLoopThread</code> using the id returned. </p> <p>Available Task</p> Name Velocity <code>TaskBack</code> 5000 ms <code>TaskSlow</code> 1000 ms <code>TaskFast</code> 500 ms <code>TaskExtraFast</code> 5 ms Argument Data Type Needed Default Description <code>LoopId</code> number <code>-</code> The loop id <code>Id</code> string/number <code>-</code> The id to identify the thread <code>Function</code> function <code>-</code> The code executed in the loop thread Returns Data Type Description number The handle of the LoopThread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function</p> Example <pre><code>CreateLoop(function(loopId)\n    TaskBack(loopId, \"main\", function()\n        print(\"Hello\")\n    end)\nend, 250)\n</code></pre>"},{"location":"client/native/TaskEasyPlayAnim/","title":"TaskEasyPlayAnim","text":"<p>Simply asf the TaskPlayAnim, see argument below and compare it with the TaskPlayAnim</p> Argument Data Type Needed Default Description <code>Animation dictionary</code> string <code>-</code> The animation dictionary, this is the list <code>Animation name</code> string <code>-</code> The animation name, this is the list <code>Flag</code> number <code>51</code> The animation flag: -1 loop, 51 moving, 0/50 stuck <code>Duration</code> number <code>-1 (Infinite)</code> The duration time in milliseconds (ms) <p>Dont need to be called every frame</p> Example <pre><code>TaskEasyPlayAnim(\"amb@world_human_golf_player@male@idle_a\", \"idle_a\")\n</code></pre>"},{"location":"client/native/TaskPlayAnim/","title":"TaskPlayAnim","text":"<p>Is equal to the standard one but dont need to load or request the anim dict</p> Argument Data Type Needed Default Description <code>Ped</code> ped <code>-</code> The ped <code>Animation dictionary</code> string <code>-</code> The animation dictionary, this is the list <code>Animation name</code> string <code>-</code> The animation name, this is the list <code>Blend in speed</code> number <code>-</code> The blend in speed <code>Blend out speed</code> number <code>-</code> The blend out speed <code>Duration</code> number <code>-</code> The duration time in milliseconds (ms) <code>Flag</code> number <code>-</code> The animation flag: -1 loop, 51 moving, 0/50 stuck <code>Playback Rate</code> number <code>-</code> No description, values are between 0.0 and 1.0 <code>LockX</code> boolean <code>0</code> No description, 0 in most cases <code>LockY</code> boolean <code>0</code> No description, 0 in most cases <code>LockZ</code> boolean <code>0</code> No description, 0 in most cases <p>Dont need to be called every frame</p> Example <pre><code>TaskPlayAnim(PlayerPedId(), \"amb@world_human_golf_player@male@idle_a\", \"idle_a\", 8.0, 1.0, -1, 49, 0)\n</code></pre> Old method <pre><code>if not HasAnimDictLoaded(\"amb@world_human_golf_player@male@idle_a\") then\n    RequestAnimDict(\"amb@world_human_golf_player@male@idle_a\")\n    while not HasAnimDictLoaded(\"amb@world_human_golf_player@male@idle_a\") do \n        Citizen.Wait(1) \n    end\nend\n\nTaskPlayAnim(PlayerPedId(), \"amb@world_human_golf_player@male@idle_a\", \"idle_a\", 8.0, 1.0, -1, 49, 0)\nRemoveAnimDict(\"amb@world_human_golf_player@male@idle_a\")\n</code></pre> Using old native <p>although i dont recommend it, you can use the old native via <code>old_TaskPlayAnim</code></p>"},{"location":"client/native/TaskVehicleDriveToCoord/","title":"TaskVehicleDriveToCoord","text":"<p>ask to a ped with a vehicle to drive at a specific coordinate</p> Argument Data Type Needed Default Description <code>Ped</code> ped <code>-</code> The driver of the vehicle <code>Vehicle</code> vehicle <code>-</code> The vehicle <code>Destination</code> vector3 <code>-</code> The destination coords <code>Speed</code> number <code>10.0</code> The driving speed <code>Stop range</code> number <code>1.0</code> The stop range <p>Dont need to be called every frame</p> Example <p>Using vector3 <pre><code>TaskVehicleDriveToCoord(ped, vehicle, vector3(0.0, 0.0, 0.0))\n</code></pre></p> Old method <pre><code>TaskVehicleDriveToCoord(ped, vehicle, vector3(0.0, 0.0, 0.0), 10.0, 0, GetEntityModel(vehicle), driving_style, 1.0)\n</code></pre> Old problem <p>THE DRIVING STYLE!!is something almost impossible to find, there is almost 0 documentation about the driving style, every time i tried to use this native i always had to go and grab the driving style from other scripts</p> Using old native <p>although i dont recommend it, you can use the old native via <code>old_TaskVehicleDriveToCoord</code></p>"},{"location":"client/native/WaitNear/","title":"WaitNear","text":"<p>Wait that the player is near to a specific position, is sync, so it will wait all the code until the player is not near the position.</p> Argument Data Type Needed Default Description <code>Coords</code> vector3 <code>-</code> The coordinates to wait near <p>Dont need to be called every frame</p> Example <pre><code>WaitNear(vector3(0.0, 0.0, 0.0))\n</code></pre>"},{"location":"client/native/_break/","title":"_break","text":"<p>Break the current loop</p> Argument Data Type Needed Default Description <code>LoopId</code> number <code>-</code> The loop id Warning <p>It can be used only into <code>CreateLoop</code> function</p> Example <pre><code>_break(loopId)\n</code></pre>"},{"location":"client/native/slice_system/GetEntitySlice/","title":"GetEntitySlice","text":"<p>Get the slice id from a entity</p> Argument Data Type Needed Default Description <code>entity</code> entity <code>-</code> The entity that whe need to get the slice id Returns Data Type Description number The slice id Example <pre><code>local slice = GetEntitySlice(PlayerPedId())\n\nprint(\"Current slice: \"..slice)\n</code></pre>"},{"location":"client/native/slice_system/GetPlayerSlice/","title":"GetPlayerSlice","text":"<p>Get the slice id from a player index (client id)</p> Argument Data Type Needed Default Description <code>player</code> Player <code>-</code> The player that whe need to get the slice id Returns Data Type Description number The slice id Example <pre><code>local slice = GetPlayerSlice(PlayerId())\n\nprint(\"Current slice: \"..slice)\n</code></pre>"},{"location":"client/native/slice_system/GetSelfSlice/","title":"GetSelfSlice","text":"<p>Get the current slice id</p> Returns Data Type Description number The slice id Example <pre><code>print(\"Current slice: \"..GetSelfSlice())\n</code></pre>"},{"location":"client/native/slice_system/GetSliceCoordsFromCoords/","title":"GetSliceCoordsFromCoords","text":"<p>Get the slice coords from a coords</p> Argument Data Type Needed Default Description <code>coords</code> vector3 <code>-</code> The coords of where whe need to get the coords Returns Data Type Description vector2 The x and the y of the center of the slice Example <pre><code>local playerCoords = GetEntityCoords(PlayerPedId())\nlocal slice = GetSliceCoordsFromCoords(playerCoords)\n\nprint(\"The center of that slice is \"..slice)\n</code></pre>"},{"location":"client/native/slice_system/GetSliceFromCoords/","title":"GetSliceFromCoords","text":"<p>Get the slice id from some coords</p> Argument Data Type Needed Default Description <code>coords</code> vector3 <code>-</code> The coords of where whe need to get the slice id Returns Data Type Description number The slice id Example <pre><code>local playerCoords = GetEntityCoords(PlayerPedId())\nlocal slice = GetSliceFromCoords(playerCoords)\n\nprint(\"Current slice: \"..slice)\n</code></pre>"},{"location":"client/native/slice_system/Integration/","title":"Integration in other script","text":"<p>The slice system allows you to optimize the scripts that control the distances by dividing the map into slice that every slice have an id, to integrate this system you must obtain the coordinates of where you want to get the slice id and simply call the function GetSliceFromCoords, after that you must set the slice as used with SetSliceUsed, to do the check create a loop that every 5 seconds or so assigns to a variable the current slice and check if the player is in a used slice, the used slice are not shared between scripts, as soon as the player is in the slice just check the coordinates for each coordinate in that slice</p> Example <pre><code>local something = {}\n\nfunction CreateSomething(coords)\n    local slice = GetSliceFromCoords(coords)\n\n    table.insert(something, {slice = slice})\n    SetSliceUsed(slice, true)\nend\n\nCreateLoop(function()\n    slice = GetSelfSlice()\nend, 5000)\n\nCreateLoop(function()\n    if SliceUsed(slice) then\n        for i=1, #something do\n            if something[i].slice == slice then\n                -- Is near a something\n            end\n        end\n    end\nend)\n</code></pre>"},{"location":"client/native/slice_system/IsOnScreen/","title":"IsOnScreen","text":"<p>Check if some coords is in the screen</p> Argument Data Type Needed Default Description <code>coords</code> vector3 <code>-</code> The coords that whe need to check Returns Data Type Description boolean If is on the screen Example <pre><code>print(\"The coords vector3(0.0, 0.0, 0.0) is on screen? \"..IsOnScreen(vector3(0.0, 0.0, 0.0)))\n</code></pre>"},{"location":"client/native/slice_system/SetSliceUsed/","title":"SetSliceUsed","text":"<p>Set a slice id as used</p> Argument Data Type Needed Default Description <code>slice id</code> number <code>-</code> The slice id <code>used</code> boolean <code>-</code> If is used or no Example <pre><code>local currentSlice = GetSelfSlice()\nSetSliceUsed(currentSlice, true)\n\nprint(\"The current slice is used? \"..SliceUsed(currentSlice)) -- The current slice is used? true\n</code></pre>"},{"location":"client/native/slice_system/SliceUsed/","title":"SliceUsed","text":"<p>Check if a slice id is used</p> Argument Data Type Needed Default Description <code>slice id</code> number <code>-</code> The slice id Returns Data Type Description boolean If is used or no Example <pre><code>print(\"There is something in my current slice? \"..SliceUsed(GetCurrentSlice()))\n</code></pre>"},{"location":"server/esx_integration/GetDataForJob/","title":"GetDataForJob","text":"<p>Return the number of player that have that job and the workers list of that job</p> Argument Data Type Needed Default Description <code>Job</code> string <code>-</code> The job name Returns Data Type Description number The number of player with that job table A table with all the id of the players with that job <p>Dont need to be called every frame</p> Example <pre><code>local count, workers = GetDataForJob(\"police\")\n\n-- count = 3\n-- workers = {3, 5, 19} \n</code></pre>"},{"location":"server/esx_integration/StartESX/","title":"StartESX","text":"<p>Start ESX with a line, dont need any return, all will be done automatically. It also automatically loads player data (like the job, that auto update) </p> <p>the <code>ESX</code> variables are made available</p> Argument Data Type Needed Default Description <code>esxEventName</code> string <code>esx:getSharedObject</code> The esx event, if you have the replaced trigger <code>Second Job</code> string <code>-</code> If you have set up the second job in the utility configuration, you need to enter the name here for it to auto-update <p>Dont need to be called every frame</p> Example <pre><code>StartESX()\n</code></pre> Old method <pre><code>ESX = nil\nTriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyAddItem/","title":"SocietyAddItem","text":"<p>Add an item to the society inventory</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Item</code> string <code>-</code> The item name <code>Amount</code> number <code>-</code> The amount <p>Dont need to be called every frame</p> Example <pre><code>SocietyAddItem(\"police\", \"bread\", 1)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyAddMoney/","title":"SocietyAddMoney","text":"<p>Add money to the society account</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Amount</code> number <code>-</code> The amount of money <p>Dont need to be called every frame</p> Example <pre><code>SocietyAddMoney(\"police\", 500)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyGetItem/","title":"SocietyGetItem","text":"<p>Get data of an item from the society inventory</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Item</code> string <code>-</code> The item name <p>Dont need to be called every frame</p> Returns Child Data Type Description name string Item name count number Item count label string Item label weight number Item weight usable boolean Whether or not the item is usable rare boolean Whether or not the item is rare canRemove boolean Whether or not the item can be thrown Example <p><pre><code>local itemData = SocietyGetItem(\"police\", \"bread\")\n</code></pre> How to use child <pre><code>local itemData = SocietyGetItem(\"police\", \"bread\")\n\n-- itemData.name = \"bread\"\n-- itemData.count = 1\n-- ...\n</code></pre></p>"},{"location":"server/esx_integration/society/SocietyHaveItem/","title":"SocietyHaveItem","text":"<p>Check if the society inventory have that item</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Item</code> string <code>-</code> The item name <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the item Example <pre><code>local have_item = SocietyHaveItem(\"police\", \"bread\")\n</code></pre>"},{"location":"server/esx_integration/society/SocietyHaveItemQuantity/","title":"SocietyHaveItemQuantity","text":"<p>Check if the society inventory have that item quantity</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Item</code> string <code>-</code> The item name <code>Quantity</code> number <code>-</code> The item quantity <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the item quantity Example <pre><code>local have_item = SocietyHaveItemQuantity(\"police\", \"bread\", 3)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyHaveMoney/","title":"SocietyHaveMoney","text":"<p>Check if the society account have that money</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Amount</code> number <code>-</code> The amount of money to check <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the money Example <pre><code>local have_money = SocietyHaveMoney(\"police\", 500)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyRemoveItem/","title":"SocietyRemoveItem","text":"<p>Remove an item from the society inventory</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Item</code> string <code>-</code> The item name <code>Amount</code> number <code>-</code> The amount <p>Dont need to be called every frame</p> Example <pre><code>SocietyRemoveItem(\"police\", \"bread\", 1)\n</code></pre>"},{"location":"server/esx_integration/society/SocietyRemoveMoney/","title":"SocietyRemoveMoney","text":"<p>Remove money from the society account</p> Argument Data Type Needed Default Description <code>Society</code> string <code>-</code> The society name <code>Amount</code> number <code>-</code> The amount of money <p>Dont need to be called every frame</p> Example <pre><code>SocietyRemoveMoney(\"police\", 500)\n</code></pre>"},{"location":"server/esx_integration/xplayer/AddItem/","title":"AddItem","text":"<p>Add an item to the player</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Item</code> string <code>-</code> The item name <code>Amount</code> number <code>-</code> The amount <p>Dont need to be called every frame</p> Example <pre><code>AddItem(source, \"bread\", 1)\n</code></pre>"},{"location":"server/esx_integration/xplayer/AddMoney/","title":"AddMoney","text":"<p>Add money to the player</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Type</code> string <code>-</code> The money type: cash, bank, black_money <code>Amount</code> number <code>-</code> The amount of money <p>Dont need to be called every frame</p> Example <pre><code>AddMoney(source, \"cash\", 500)\n\nAddMoney(source, \"bank\", 500)\n\nAddMoney(source, \"black_money\", 500)\n</code></pre>"},{"location":"server/esx_integration/xplayer/GetItem/","title":"GetItem","text":"<p>Get data of an item by the player</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Item</code> string <code>-</code> The item name <p>Dont need to be called every frame</p> Returns Child Data Type Description name string Item name count number Item count label string Item label weight number Item weight usable boolean Whether or not the item is usable rare boolean Whether or not the item is rare canRemove boolean Whether or not the item can be thrown Example <p><pre><code>local itemData = GetItem(source, \"bread\")\n</code></pre> How to use child <pre><code>local itemData = GetItem(source, \"bread\")\n\n-- itemData.name = \"bread\"\n-- itemData.count = 1\n-- ...\n</code></pre></p>"},{"location":"server/esx_integration/xplayer/HaveItem/","title":"HaveItem","text":"<p>Check if the player have that item</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Item</code> string <code>-</code> The item name <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the item Example <pre><code>local have_item = HaveItem(source, \"bread\")\n</code></pre>"},{"location":"server/esx_integration/xplayer/HaveItemQuantity/","title":"HaveItemQuantity","text":"<p>Check if the player have that item quantity</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Item</code> string <code>-</code> The item name <code>Quantity</code> number <code>-</code> The item quantity <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the item quantity Example <pre><code>local have_item = HaveItemQuantity(source, \"bread\", 3)\n</code></pre>"},{"location":"server/esx_integration/xplayer/HaveMoney/","title":"HaveMoney","text":"<p>Check if the player have that money</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Type</code> string <code>-</code> The money type: cash, bank, black_money <code>Amount</code> number <code>-</code> The amount of money to check <p>Dont need to be called every frame</p> Returns Data Type Description boolean If have or no the money Example <pre><code>local have_money = HaveMoney(source, \"cash\", 500)\n</code></pre>"},{"location":"server/esx_integration/xplayer/RemoveItem/","title":"RemoveItem","text":"<p>Remove an item from the player</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Item</code> string <code>-</code> The item name <code>Amount</code> number <code>-</code> The amount <p>Dont need to be called every frame</p> Example <pre><code>RemoveItem(source, \"bread\", 1)\n</code></pre>"},{"location":"server/esx_integration/xplayer/RemoveMoney/","title":"RemoveMoney","text":"<p>Remove money from the player</p> Argument Data Type Needed Default Description <code>id</code> number <code>-</code> <code>Type</code> string <code>-</code> The money type: cash, bank, black_money <code>Amount</code> number <code>-</code> The amount of money <p>Dont need to be called every frame</p> Example <pre><code>RemoveMoney(source, \"cash\", 500)\n\nRemoveMoney(source, \"bank\", 500)\n\nRemoveMoney(source, \"black_money\", 500)\n</code></pre>"},{"location":"server/misc/printd/","title":"printd","text":"<p>Dump a table, simply convert a table to a string</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table to dump <code>Advanced</code> boolean <code>false</code> Is true return an advanced dump of the table Returns Data Type Description string The dumped table <p>Dont need to be called every frame</p> Example <pre><code>local _table = {\n    message = \"Hello\"\n}\n\nprintd(_table)\n</code></pre> Expected Results <pre><code>{\n    \"message\": \"Hello\"\n}\n</code></pre>"},{"location":"server/misc/string.multigsub/","title":"string.multigsub","text":"<p>Replace multiple part of a string</p> Argument Data Type Needed Default Description <code>String</code> string <code>-</code> The original texture <code>Pattern</code> table <code>-</code> The pattern to find and replace <code>Replacement</code> table <code>-</code> The replacemente table <p>Dont need to be called every frame</p> Example <pre><code>local string = \"i love me\"\n\nlocal new_string = string.multigsub(string, {\"love\", \"me\"}, {\"hate\", \"you\"})\n\nprint(new_string)\n</code></pre> Expected result <p><code>i hate you</code></p>"},{"location":"server/misc/table.clone/","title":"table.clone","text":"<p>Clone a table</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The original table Returns Data Type Description table The cloned table <p>Dont need to be called every frame</p> Example <pre><code>local tabletoclone = {\n    msg = \"Hello\"\n}\n\nlocal cloned_table = table.clone(tabletoclone)\n\nprint(cloned_table.msg)\n</code></pre> Expected result <p><code>Hello</code></p>"},{"location":"server/misc/table.empty/","title":"table.empty","text":"<p>Check if a table is empty</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table Returns Data Type Description boolean True if is empty, false if have some data <p>Dont need to be called every frame</p> Example <pre><code>local emptytable = {}\n\nprint(table.empty(emptytable))\n</code></pre> Expected result <p><code>true</code></p>"},{"location":"server/misc/table.fexist/","title":"table.fexist","text":"<p>Check if the field exist in the table</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table <code>Field</code> string <code>-</code> The field to check Returns Data Type Description boolean True if field exist, false if field dont exist <p>Dont need to be called every frame</p> Example <pre><code>local tabletocheck = {\n    msg = \"Message\",\n    another = 2\n}\n\nprint(table.fexist(tabletocheck, \"msg\"))\nprint(table.fexist(tabletocheck, \"utility\"))\n</code></pre> Expected result <p><code>true</code> <code>false</code></p>"},{"location":"server/misc/table.remove/","title":"table.remove","text":"<p>Equal to the native table.remove of lua but accept string as position</p> Argument Data Type Needed Default Description <code>Table</code> table <code>-</code> The table <code>Position</code> number/string <code>-</code> The position of the data to remove <p>Dont need to be called every frame</p> Example <pre><code>local tabletocheck = {\n    [\"Hello\"] = 5,\n    [\"Utility\"] = 1,\n}\n\ntable.remove(tabletocheck, \"Hello\")\n\nprint(json.encode(tabletocheck))\n</code></pre> Expected result <p><code>{\"Utility\":1}</code></p>"},{"location":"server/mysql/ExecuteSql/","title":"ExecuteSql","text":"<p>Execute any type of sql query, automatically detect the query</p> Argument Data Type Needed Default Description <code>Query</code> string <code>-</code> The query <code>Params</code> table <code>-</code> The query params <p>Dont need to be called every frame</p> Example <pre><code>ExecuteSql(\"INSERT INTO utility_db_integration SET data = @data\", {\n    [\"@data\"] = \"Hello\"\n})\n\nlocal data = ExecuteSql(\"SELECT * FROM utility_db_integration\")\n</code></pre>"},{"location":"server/mysql/StartMySQL/","title":"StartMySQL","text":"<p>Start MySQL with a line, dont need any return, all will be done automatically.</p> <p>Dont need to be called every frame</p> Example <pre><code>StartMySQL()\n</code></pre>"},{"location":"server/native/CreateLoop/","title":"CreateLoop","text":"<p>Create a while true do loop</p> Argument Data Type Needed Default Description <code>Function</code> function <code>-</code> The code executed in the loop <code>Time</code> number <code>5</code> The time express in millisenconds (ms) of the execution <p>Dont need to be called every frame</p> Example <p>Without time: <pre><code>CreateLoop(function()\n    print(\"Test\")\nend)\n</code></pre> With time: <pre><code>CreateLoop(function()\n    print(\"Test\")\nend, 500)\n</code></pre></p> Old method <pre><code>Citizen.CreateThread(function()\n    while true do\n        print(\"Test\")\n        Citizen.Wait(5)\n    end\nend)\n</code></pre> Old problem <p>In the old method if you forgot to insert <code>Citizen.Wait(ms)</code> the ALL server will crashI created it because i was sick of the thousands of times my server crashed, Thanks FiveM \ud83d\ude09</p>"},{"location":"server/native/LoopThread/","title":"LoopThread","text":"<p>It will create a thread in the loop, the code inserted into the function will be executed each time for the inserted time, it can be used for optimize code (See example)</p> Argument Data Type Needed Default Description <code>Id</code> string/number <code>-</code> The id to identify the thread <code>Time</code> number <code>-</code> The time express in millisenconds (ms) of the execution <code>Function</code> function <code>-</code> The code executed in the loop thread Returns Data Type Description number The handle of the LoopThread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function</p> Example <p>How it can be used for optimization: <pre><code>local Luck = 1\n\nCreateLoop(function()\n    LoopThread(500, function()\n        Luck = Luck + 1\n    end)\n\n    print(Luck)\nend, 250)\n</code></pre></p> Expected Results <p>The thread overlaps because the thread time is a multiple of the time loop (in that case 2 or 3)</p> <p>1 1</p> <p>2 2 2</p> <p>3 3</p> <p>4 4</p> <p>5 5 5 ...etc</p> <p>How it works: <pre><code>CreateLoop(function()\n    print(\"Start\")\n    LoopThread(1000, function()\n        print(\"Loop Thread\")\n    end)\n    print(\"End\")\nend, 500)\n</code></pre></p> Expected Results <p>The thread overlaps because the thread time is a multiple of the time loop (in that case 2 or 3)</p> <p>Start End</p> <p>LoopThread Start End</p> <p>Start End</p> <p>Start End</p> <p>LoopThread Start End ...etc</p>"},{"location":"server/native/RegisterServerEvent/","title":"RegisterServerEvent","text":"<p>Record a server-side event that is triggerable by the server and also by the client.The event have the AddEventHandler already loaded</p> Argument Data Type Needed Default Description <code>EventName</code> string <code>-</code> The name of the event <code>Function</code> function <code>-</code> The code executed when the event was triggered <code>Auto-Prepare</code> boolean <code>true</code> If setted to false don't auto-prepare the event for works with ESX (don't load the esx basic variable) Other difference <p>It also auto-prepare the event to work with esx, so it auto load the <code>xPlayer</code> and <code>_source</code> variable</p> <p>Don't need to be called every frame</p> Example <pre><code>RegisterServerEvent(\"utility_libs:ILoveYou\", function()\n    print(GetPlayerName()..\" love the utility_libs, how to blame it?\")\nend)\n</code></pre> Old method <pre><code>RegisterServerEvent(\"utility_libs:ILoveYou\")\nAddEventHandler(\"utility_libs:ILoveYou\", function()\n    local _source = source\n    local xPlayer = ESX.GetPlayerFromId(_source)\n\n    print(GetPlayerName(PlayerId())..\" love the utility_libs, how to blame it?\")\nend)\n</code></pre> Using old native <p>although i don't recommend it, you can use the old native via <code>old_RegisterServerEvent</code></p>"},{"location":"server/native/ResumeLoopThread/","title":"ResumeLoopThread","text":"<p>Resume a stopped thread identified by the id inserted</p> Argument Data Type Needed Default Description <code>Handle</code> string/number <code>-</code> The handle of the loop thread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function where you created the thread</p> Example <pre><code>ResumeLoopThread(myloopthread)\n</code></pre>"},{"location":"server/native/ShowNotification/","title":"ShowNotification","text":"<p>Draw a notification in the bottom-left</p> Argument Data Type Needed Default Description <code>Source</code> number <code>-</code> The id to which the notification must be sent <code>Message</code> string <code>-</code> The message to show <p>Dont need to be called every frame</p> Example <pre><code>ShowNotification(source, \"Example\")\n</code></pre> Tip"},{"location":"server/native/ShowNotification/#supported-color-syntax","title":"Supported Color Syntax","text":"Syntax Color ~r~ <p>Red</p> ~b~ <p>Blue</p> ~g~ <p>Green</p> ~y~ <p>Yellow</p> ~p~ <p>Purple</p> ~o~ <p>Orange</p> ~c~ <p>Grey</p> ~m~ <p>Dark Grey</p> ~u~ <p>Black</p> ~n~ New Line ~s~ White (default) ~w~ White ~h~ Bold \u2211 Rockstar Icon \u00a6 Rockstar Verified Icon <code>ShowNotification(\"\u2211\u00f7\u00a6~r~ r ~b~ b ~g~ g ~y~ y ~p~ p ~c~ gr ~m~ d gr ~u~ bl ~o~ or ~s~ re ~n~ nl ~h~ Bold\")</code>"},{"location":"server/native/StopLoopThread/","title":"StopLoopThread","text":"<p>Stop the loop thread identified by the id inserted</p> Argument Data Type Needed Default Description <code>Handle</code> string/number <code>-</code> The handle of the loop thread <p>Dont need to be called every frame</p> Warning <p>It can be used only into <code>CreateLoop</code> function where you created the thread</p> Example <pre><code>StopLoopThread(myloopthread)\n</code></pre>"},{"location":"server/native/_break/","title":"_break","text":"<p>Break the current loop</p> Warning <p>It can be used only into <code>CreateLoop</code> function</p> Example <pre><code>_break()\n</code></pre>"}]}